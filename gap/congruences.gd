#############################################################################
##
#W  congruences.gd
#Y  Copyright (C) 2006-2010                             James D. Mitchell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##
## $Id$
##

###########################################################################
## undocumented, for testing purposes only...

DeclareAttribute("CongruencesOfSemigroup", IsSemigroup);
DeclareAttribute("CongruencesOfSemigroupAsPositions", IsSemigroup);

###########################################################################
##  <#GAPDoc Label="CongruencesSemilattice">
##  <ManSection> 
##  <Attr Name="CongruencesSemilattice" Arg="s"/>
##  <Description>
##  returns the congruences of the semilattice <C>s</C> as a partition of 
##  the elements of <C>s</C>.<P/>
##
##  See also <Ref Attr="CongruencesSemilatticeAsPositions"/>.
##  <Example>
##  gap> gens:=[ Transformation( [ 4, 2, 3, 4 ] ),
##  > Transformation( [ 1, 4, 4, 4 ] ),                                           
##  > Transformation( [ 4, 2, 3, 4 ] ) ];;
##  gap> s:=Semigroup(gens);;
##  gap> IsSemilatticeAsSemigroup(s);
##  true
##  gap> CongruencesSemilattice(Semigroup(gens));
##  [ [ [ Transformation( [ 1, 4, 4, 4 ] ) ], [ Transformation( [ 4, 2, 3, 4 ] ) ], 
##        [ Transformation( [ 4, 4, 4, 4 ] ) ] ], 
##    [ [ Transformation( [ 1, 4, 4, 4 ] ) ], 
##        [ Transformation( [ 4, 2, 3, 4 ] ), Transformation( [ 4, 4, 4, 4 ] ) ] ], 
##    [ [ Transformation( [ 1, 4, 4, 4 ] ), Transformation( [ 4, 2, 3, 4 ] ), 
##            Transformation( [ 4, 4, 4, 4 ] ) ] ], 
##    [ [ Transformation( [ 1, 4, 4, 4 ] ), Transformation( [ 4, 4, 4, 4 ] ) ], 
##        [ Transformation( [ 4, 2, 3, 4 ] ) ] ] ]
##  </Example> <!-- cong_no_smallsemi -->
##  </Description>
##  </ManSection>
##	<#/GAPDoc>

DeclareAttribute("CongruencesSemilattice", IsSemilatticeAsSemigroup);

###########################################################################
##  <#GAPDoc Label="CongruencesSemilatticeAsPositions">
##  <ManSection> 
##  <Attr Name="CongruencesSemilatticeAsPositions" Arg="s"/>
##  <Description>
##  returns the congruences of the semilattice <C>s</C> as a partition 
##  <C>p</C> of <C>[1..Size(s)]</C> so that <C>List(p, x-> Elements(s){x})</C> 
##  is a congruence of <C>s</C>.<P/>
##
##  See also <Ref Attr="CongruencesSemilattice"/>.
##  <Example>
##  gap> gens:=[ Transformation( [ 4, 2, 3, 4 ] ),
##  > Transformation( [ 1, 4, 4, 4 ] ),                                           
##  > Transformation( [ 4, 2, 3, 4 ] ) ];;
##  gap> s:=Semigroup(gens);;
##  gap> CongruencesSemilatticeAsPositions(s);
##  [ [ [ 1 ], [ 2 ], [ 3 ] ], [ [ 1 ], [ 2, 3 ] ], [ [ 1, 2, 3 ] ], 
##    [ [ 1, 3 ], [ 2 ] ] ]
##  </Example>
##  </Description> <!-- cong_no_smallsemi -->
##  </ManSection>
##	<#/GAPDoc>

DeclareAttribute("CongruencesSemilatticeAsPositions", IsSemilatticeAsSemigroup);

###########################################################################
# interal undocumented function, see .gi file for brief explanation!

DeclareGlobalFunction("CongruencesSemilatticeAsPositionsNC");

###########################################################################
##  <#GAPDoc Label="ConvexSubsemigroup">
##  <ManSection> 
##  <Func Name="ConvexSubsemigroup" Arg="s, t"/>
##  <Func Name="ConvexSubsemigroupNC" Arg="s, t"/>
##  <Description>
##  returns the least convex subsemigroup of the semilattice <C>s</C> containing 
##  the subset <C>t</C> of <C>s</C>. <P/>
##
##  The no check version requires that <C>s</C> is generated by all 
##  of its elements and does not check that <C>s</C> is a semilattice or
##  that <C>t</C> is a subset of <C>s</C>.<P/>
##
##  See also <Ref Func="ConvexSubsemigroupAsPositionsNC"/> and see
##  <Ref Func="IsConvexSubsetOfSemilattice"/> for the definition of a 
##  convex subsemigroup of a semilattice. 
##  <Example>
##  gap> gens:=[ Transformation( [ 1, 2, 6, 4, 6, 6 ] ), 
##  > Transformation( [ 6, 2, 3, 4, 6, 6 ] ), 
##  > Transformation( [ 1, 6, 3, 4, 6, 6 ] ), 
##  > Transformation( [ 6, 6, 6, 6, 6, 6 ] ) ];;
##  gap> a:=Semigroup(gens);;
##  gap> Size(a);
##  8
##  gap> f:=Elements(a)[1];
##  Transformation( [ 1, 2, 6, 4, 6, 6 ] )
##  gap> g:=Elements(a)[8];
##  Transformation( [ 6, 6, 6, 6, 6, 6 ] )
##  gap> ConvexSubsemigroup(a, [f,g]);  
##  [ Transformation( [ 1, 2, 6, 4, 6, 6 ] ), Transformation( [ 1, 6, 6, 4, 6,  6 ] ), 
##    Transformation( [ 6, 2, 6, 4, 6, 6 ] ), Transformation( [ 6, 6, 6, 4, 6, 6 ] ), 
##    Transformation( [ 6, 6, 6, 6, 6, 6 ] ) ]
##  gap> ConvexSubsemigroupNC(a, [f,g]);
##  [ Transformation( [ 1, 2, 6, 4, 6, 6 ] ), Transformation( [ 1, 6, 6, 4, 6, 6 ] ), 
##    Transformation( [ 6, 2, 6, 4, 6, 6 ] ), Transformation( [ 6, 6, 6, 4, 6, 6 ] ), 
##    Transformation( [ 6, 6, 6, 6, 6, 6 ] ) ]
##  </Example>
##  </Description><!-- cong_no_smallsemi.tst -->
##  </ManSection>
##	<#/GAPDoc>

DeclareGlobalFunction("ConvexSubsemigroup");
DeclareGlobalFunction("ConvexSubsemigroupNC");

###########################################################################
##  <#GAPDoc Label="ConvexSubsemigroupAsPositionsNC">
##  <ManSection> 
##  <Func Name="ConvexSubsemigroupAsPositionsNC" Arg="cayley, subset"/>
##  <Description>
##  if <C>cayley</C> is the Cayley graph of a semilattice <C>s</C> generated by 
##  all of its elements and <C>subset</C> is a list of positive integers 
##  corresponding to the positions of a subset of <C>s</C> in 
##  <C>Elements(s)</C>, then <C>ConvexSubsemigroupAsPositionsNC</C> returns a 
##  list of the positions in 
##  <C>Elements(s)</C> of the elements of the least convex subsemigroup of 
##  <C>s</C> containing <C>Elements(s){subset}</C>.<P/>
## 
##  See also <Ref Func="ConvexSubsemigroup"/> and see 
##  <Ref Func="IsConvexSubsetOfSemilattice"/> for the definition of a 
##  convex subsemigroup of a semilattice. 
##  <Example>
##  gap> gens:=[ Transformation( [ 1, 2, 6, 4, 6, 6 ] ), 
##  > Transformation( [ 6, 2, 3, 4, 6, 6 ] ), 
##  > Transformation( [ 1, 6, 3, 4, 6, 6 ] ), 
##  > Transformation( [ 6, 6, 6, 6, 6, 6 ] ) ];;
##  gap> a:=Semigroup(gens);;
##  gap> a:=Semigroup(Elements(a));; cayley:=CayleyGraphSemigroup(a);; 
##  gap> subset:=[1,8];
##  gap> ConvexSubsemigroupAsPositionsNC(cayley, subset);
##  [ 1, 3, 5, 7, 8 ]
##  </Example>
##  </Description><!-- cong_no_smallsemi.tst -->
##  </ManSection>
##	<#/GAPDoc>

DeclareGlobalFunction("ConvexSubsemigroupAsPositionsNC");

###########################################################################
##  <#GAPDoc Label="ConvexSubsemigroups">
##  <ManSection> 
##  <Attr Name="ConvexSubsemigroups" Arg="s"/>
##  <Description>
##  returns a list of the elements of all the convex subsemigroups of the 
##  semilattice <C>s</C>.<P/>
##
##  See also <Ref Attr="ConvexSubsemigroupsAsPositions"/> and see
##  <Ref Func="IsConvexSubsetOfSemilattice"/> for the definition of a 
##  convex subsemigroup of a semilattice. 
##  <Example>
##  gap> gens:=[ Transformation( [ 1, 2 ] ), Transformation( [ 2, 2 ] ) ];;
##  gap> s:=Semigroup(gens);;
##  gap> Size(s);
##  2
##  gap> ConvexSubsemigroups(s);
##  [ [ Transformation( [ 1, 2 ] ) ], 
##    [ Transformation( [ 1, 2 ] ), Transformation( [ 2, 2 ] ) ], 
##    [ Transformation( [ 2, 2 ] ) ] ]
##  </Example>
##  </Description><!-- cong_no_smallsemi.tst -->
##  </ManSection>
##	<#/GAPDoc>

DeclareAttribute("ConvexSubsemigroups", IsSemilatticeAsSemigroup);

###########################################################################
##  <#GAPDoc Label="ConvexSubsemigroupsAsPositions">
##  <ManSection> 
##  <Attr Name="ConvexSubsemigroupsAsPositions" Arg="s"/>
##  <Func Name="ConvexSubsemigroupsAsPositionsNC" Arg="arg"/>
##  <Description>
##  returns a list of the positions in <C>Elements(s)</C> of the elements of all 
##  the convex subsemigroups of the semilattice <C>s</C>.<P/>
##
##  The no check version accepts either one or two arguments. If one argument is 
##  present, then it is assumed (but not checked) that the argument is a 
##  semilattice generated by all of its elements. If two arguments are present, 
##  then it is assumed (but not checked) that the first is the set of elements 
##  of a semilattice and the second is the cayley graph of the semilattice 
##  generated by all of its elements. <P/>

##  See also <Ref Attr="ConvexSubsemigroups"/> and see
##  <Ref Func="IsConvexSubsetOfSemilattice"/> for the definition of a 
##  convex subsemigroup of a semilattice. 
##  <Example>
##  gap> gens:=[ Transformation( [ 3, 2, 3 ] ), Transformation( [ 1, 2, 3 ] ), 
##  >  Transformation( [ 1, 3, 3 ] ) ];;
##  gap> s:=Semigroup(gens);;
##  gap> Size(s);
##  4
##  gap> ConvexSubsemigroupsAsPositions(s);
##  [ [ 1 ], [ 1, 2 ], [ 1, 2, 3, 4 ], [ 1, 3 ], [ 2 ], [ 2, 3, 4 ], [ 2, 4 ], 
##    [ 3 ], [ 3, 4 ], [ 4 ] ]
##	</Example>
##  </Description><!-- cong_no_smallsemi.tst -->
##  </ManSection>
##	<#/GAPDoc>

DeclareAttribute("ConvexSubsemigroupsAsPositions", IsSemilatticeAsSemigroup);
DeclareGlobalFunction("ConvexSubsemigroupsAsPositionsNC");

###########################################################################
##  <#GAPDoc Label="InfoMonoidCongruences">
##  <ManSection> 
##  <InfoClass Name="InfoMonoidCongruences"/>
##  <Description>
##	This is the InfoClass for the functions in monoid relating to the 
##  computation of congruences of a semigroup. Setting the value 
##	of <C>InfoMonoidAutos</C> to <C>1, 2, 3,</C> or <C>4</C> using the 
##  command <Ref Oper="SetInfoLevel" BookName="ref"/> will give different 
##  levels of information about what <C>GAP</C> is doing during a 
##  computation. 
##  </Description>
##  </ManSection>
##	<#/GAPDoc>

DeclareInfoClass("InfoMonoidCongruences");

###########################################################################
##  <#GAPDoc Label="IsCongruenceOfSemigroup">
##  <ManSection> 
##  <Func Name="IsCongruenceOfSemigroup" Arg="s, p"/>
##  <Func Name="IsCongruenceOfSemigroupNC" Arg="s, p"/>
##  <Description>
##  returns <C>true</C> if the partition <C>p</C> of the elements of the 
##  semigroup <C>s</C> is a congruence of <C>s</C>.<P/>
##
##  The no check version does not check that <C>s</C> is a semigroup or 
##  that <C>p</C> is a partition of its elements. 
##  <Example>  
##  gap> gens:=[ Transformation( [ 5, 2, 3, 4, 5 ] ), 
##  > Transformation( [ 1, 5, 3, 4, 5 ] ), 
##  > Transformation( [ 1, 5, 5, 4, 5 ] ), 
##  > Transformation( [ 5, 2, 5, 4, 5 ] ) ];;
##  gap> s:=Semigroup(gens);;
##  gap> p:=[ [ Transformation( [ 1, 5, 3, 4, 5 ] ) ],
##  > [ Transformation( [ 1, 5, 5, 4, 5 ] ), 
##  > Transformation( [ 5, 5, 3, 4, 5 ] ), 
##  > Transformation( [ 5, 5, 5, 4, 5 ] ) ], 
##  > [ Transformation( [ 5, 2, 3, 4, 5 ] ) ], 
##  > [ Transformation( [ 5, 2, 5, 4, 5 ] ) ] ];;
##  gap> IsCongruenceOfSemigroup(s, p);
##  true
##  gap> p:=[ [ Transformation( [ 1, 5, 3, 4, 5 ] ), 
##  > Transformation( [ 1, 5, 5, 4, 5 ] ), 
##  > Transformation( [ 5, 5, 3, 4, 5 ] ), 
##  > Transformation( [ 5, 5, 5, 4, 5 ] ) ], 
##  > [ Transformation( [ 5, 2, 3, 4, 5 ] ) ], 
##  > [ Transformation( [ 5, 2, 3, 4, 5 ] ) ] ];;
##  gap> IsCongruenceOfSemigroupNC(s, p);
##  false
##  </Example>
##  </Description><!-- cong_no_smallsemi.tst -->
##  </ManSection>
##	<#/GAPDoc>

DeclareGlobalFunction("IsCongruenceOfSemigroup");
DeclareGlobalFunction("IsCongruenceOfSemigroupNC");

###########################################################################
##  <#GAPDoc Label="IsConvexSubsetOfSemilattice">
##  <ManSection> 
##  <Func Name="IsConvexSubsetOfSemilattice" Arg="s, t"/>
##  <Func Name="IsConvexSubsetOfSemilatticeNC" Arg="s, t"/>
##  <Description>
##  returns <C>true</C> if the subset <C>t</C>  of 
##  the semilattice <C>s</C> is convex.  
##  A subset <C>t</C> of a semilattice is 
##	<E>convex</E> if for all <C>x,y</C> in <C>t</C> and for all 
##  <C>z</C> in <C>s</C> if <C>x&lt;z&lt;y</C>, then <C>z</C> in <C>t</C>.<P/>
##
##  The no check version requires that <C>s</C> is a semilattice that is 
##  generated by all of its elements, and no check is performed to ensure
##  that <C>s</C> is a semilattice or that <C>t</C> is contained in <C>s</C>.
##
##  <Example>
##  gap> gens:=[ Transformation( [ 1, 2, 6, 4, 6, 6 ] ), 
##  > Transformation( [ 6, 2, 3, 4, 6, 6 ] ), 
##  > Transformation( [ 1, 6, 3, 4, 6, 6 ] ), 
##  > Transformation( [ 6, 6, 6, 6, 6, 6 ] ) ];;
##  gap> a:=Semigroup(gens);;
##  gap> f:=Elements(a)[1];;
##  gap> g:=Elements(a)[8];;
##  gap> IsConvexSubsetOfSemilattice(a,[f,g]);
##  false
##  gap> IsConvexSubsetOfSemilatticeNC(a,[f,g]);
##  false
##  gap> IsConvexSubsetOfSemilatticeNC(a, ConvexSubsemigroup(a, [f,g]));
##  true
##  </Example>
##  </Description><!-- cong_no_smallsemi.tst -->
##  </ManSection>
##	<#/GAPDoc>

DeclareGlobalFunction("IsConvexSubsetOfSemilatticeNC");
DeclareGlobalFunction("IsConvexSubsetOfSemilattice");

###########################################################################
##  <#GAPDoc Label="OneMinEltSemilatticeAsPosition">
##  <ManSection> 
##  <Func Name="OneMinEltSemilatticeAsPosition" Arg="s[, subset]"/>
##  <Func Name="OneMinEltSemilatticeAsPositionNC" Arg="cayley, subset"/>
##  <Description>
##  returns the position in the elements of the semilattice <C>s</C>  
##  of a minimal element. If the optional second argument is present, then 
##  the position in <C>Elements(s){subset}</C> of a minimal element of 
##  <C>Elements(s){subset}</C> is returned. <P/>
##
##  The no check version requires the cayley graph of a semilattice generated 
##  by all of its elements as a first argument, and a list of positive
##  integers as a second argument. No check is performed to ensure these 
##  requirements are met.<P/>
##
##  See also <Ref Func="OneMinEltSemilattice"/>.
##  <Example>
##  gap> gens:=[ Transformation( [ 1, 2, 4, 4 ] ), 
##  > Transformation( [ 1, 4, 4, 4 ] ), 
##  > Transformation( [ 4, 2, 3, 4 ] ), 
##  > Transformation( [ 4, 2, 4, 4 ] ), 
##  > Transformation( [ 4, 4, 3, 4 ] ) ];;
##  gap> s:=Semigroup(gens);;
##  gap> OneMinEltSemilattice(s);
##  gap> OneMinEltSemilattice(s);
##  Transformation( [ 4, 4, 4, 4 ] )
##  gap> OneMinEltSemilatticeAsPosition(s);
##  6
##  gap> OneMinEltSemilatticeAsPosition(s, [1,2,3]);
##  2
##  gap> OneMinEltSemilatticeAsPosition(s, [2,5,6]);
##  6
##  </Example>
##  </Description><!-- cong_no_smallsemi.tst -->
##  </ManSection>
##	<#/GAPDoc>

DeclareGlobalFunction("OneMinEltSemilatticeAsPosition");
DeclareGlobalFunction("OneMinEltSemilatticeAsPositionNC");

###########################################################################
##  <#GAPDoc Label="OneMinEltSemilattice">
##  <ManSection> 
##  <Func Name="OneMinEltSemilattice" Arg="s[, subset]"/>
##  <Description>
##  returns a minimal element of the semilattice <C>s</C>.  
##  If the optional second argument <C>subset</C> is present, then 
##  a minimal element in <C>subset</C> is returned. <P/>
##
##  See also <Ref Func="OneMinEltSemilatticeAsPosition"/>.
##  <Example>
##  gap> gens:=[ Transformation( [ 1, 2, 4, 4 ] ), 
##  > Transformation( [ 1, 4, 4, 4 ] ), 
##  > Transformation( [ 4, 2, 3, 4 ] ), 
##  > Transformation( [ 4, 2, 4, 4 ] ), 
##  > Transformation( [ 4, 4, 3, 4 ] ) ];;
##  gap> s:=Semigroup(gens);;
##  gap> OneMinEltSemilattice(s);
##  gap> OneMinEltSemilattice(s);
##  Transformation( [ 4, 4, 4, 4 ] )
##  gap> OneMinEltSemilatticeAsPosition(s);
##  6
##  gap> OneMinEltSemilatticeAsPosition(s, [1,2,3]);
##  2
##  gap> OneMinEltSemilatticeAsPosition(s, [2,5,6]);
##  6  
##  </Example>
##  </Description><!-- cong_no_smallsemi.tst -->
##  </ManSection>
##	<#/GAPDoc>

DeclareGlobalFunction("OneMinEltSemilattice");