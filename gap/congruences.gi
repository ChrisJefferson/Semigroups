#############################################################################
##
#W  congruences.gi
#Y  Copyright (C) 2006-2010                             James D. Mitchell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##
## $Id$
##

# - alphabetize .gi!
# - add info messages
# - make everything a global function or whatever
# - write doc
# - write tests
# - make final efficiency changes...



###############################################################################
# a subsemigroup T of a semilattice S is convex if for all x,y in T and for all 
# z in S if x<z<y then z in T. 

InstallGlobalFunction(IsConvexSubsemigpOfSemilatticeNC, 
function(s, t)
local g, x, y, z, pos;

Info(InfoMonoidCongruences, 4, "IsConvexSubsemigpOfSemilatticeNC");

g:=CayleyGraphSemigroup(s); 
#this is transitive if s is generated by all its elements!
pos:=Filtered([1..Size(s)], x-> Elements(s)[x] in t);

for x in pos do 
  for y in [1..Size(s)] do 
    for z in pos do
      if y in g[x] and z in g[y] and not Elements(s)[y] in t then 
        return false;
      fi;
    od;
  od;
od;

return true;
end);

###############################################################################

InstallGlobalFunction(IsConvexSubsemigpOfSemilattice, 
function(s, t)
local u;

Info(InfoMonoidCongruences, 4, "IsConvexSubsemigpOfSemilattice");

if IsSemilatticeAsSemigroup(s) and IsSemilatticeAsSemigroup(t) and HasParent(t) 
 and Parent(t)=s then 
  if Length(GeneratorsOfSemigroup(s))=Size(s) then 
    u:=s;
  else
    u:=Semigroup(GeneratorsOfSemigroup(s));
    SetIsFinite(u, true);
  fi;
  return IsConvexSubsemigpOfSemilatticeNC(u, t);
fi;

Info(InfoWarning, 1, "Usage: semilattice and subsemigroup of semilattice");
return fail;
end);

###############################################################################
# the following assumes cayley is a cayley graph of a semilattice generated
# by all of its elements and subset is a set of pos. ints.

InstallGlobalFunction(ConvexSubsemigroupByCayleyGraph,
function(cayley, subset)
local out, x, y, z;
out:=subset;

for x in subset do 
  for y in [1..Size(cayley)] do 
    for z in subset do
      if y in cayley[x] and z in cayley[y] then 
        AddSet(out, y);
      fi;
    od;
  od;
od;

return out;
end);

###############################################################################
#the convex subsemigroup generated by the elements t in s

InstallGlobalFunction(ConvexSubsemigroupNC,
function(s, t)
local subset, out;

Info(InfoMonoidCongruences, 4, "ConvexSubsemigroupNC");

subset:=List(t, x-> Position(Elements(t), x));
out:=ConvexSubsemigroupByCayleyGraph(CayleyGraphSemigroup(s), subset);
return List(out, x-> Elements(s){x});
end);

###############################################################################

InstallGlobalFunction(ConvexSubsemigroup,
function(s, t)
local u;

Info(InfoMonoidCongruences, 4, "ConvexSubsemigroup");

if IsSemilatticeAsSemigroup(s) and IsSubset(Elements(s), t) then 
  if  Length(GeneratorsOfSemigroup(s))=Size(s) then 
    u:=s;
  else
    u:=Semigroup(GeneratorsOfSemigroup(s));
    SetIsFinite(u, true);
  fi;
  return ConvexSubsemigroupNC(s, u);
fi;

Info(InfoWarning, 1, "Usage: semilattice and subset of its elements");
return fail;
end);

###############################################################################
# return all convex subsemigroups of semilattice with cayley graph <cayley>.

InstallGlobalFunction(ConvexSubsemigroupsByCayleyGraph,
function(elts, cayley)
local anti, out, i, j, k, anti2;

Info(InfoMonoidCongruences, 4, "ConvexSubsemigroupsByCayleyGraph");

#get antichains
anti:=CompleteSubgraphs(Graph(Group(()), [1..Length(cayley)], OnPoints, 
 function(i,j) return not i in cayley[j] and not j in cayley[i]; end, true));
anti2:=[];
out:=[];

#maybe use a hash table here...

for i in anti do 
  for j in Combinations(i) do 
    if not j=[] then 
      AddSet(anti2, j);
    fi;
  od;
od;

for i in anti2 do
  for k in Set(cayley[Position(elts, Product(elts{i}))]) do 
    AddSet(out, ConvexSubsemigroupByCayleyGraph(cayley, Union(i, [k])));
  od;
od;

return out;
end);

###############################################################################
# return all convex subsemigroups of s

InstallOtherMethod(ConvexSubsemigroups, "for a semilattice",
[IsSemilatticeAsSemigroup], 
function(s)
local t, convex;

Info(InfoMonoidCongruences, 4, "ConvexSubsemigroups");

if Length(GeneratorsOfSemigroup(s))=Size(s) then 
  t:=s;
else
  t:=Semigroup(GeneratorsOfSemigroup(s));
  SetIsFinite(t, true);
fi;

convex:=ConvexSubsemigroupsByCayleyGraph(Elements(t), CayleyGraphSemigroup(t));
return List(convex, x-> Elements(t){x});
end);

###############################################################################
#

InstallGlobalFunction(OneMinimalEltSemilatticeByCayleyGraph, 
function(cayley, subset)

Info(InfoMonoidCongruences, 4, "OneMinimalEltSemilatticeByCayleyGraph");

return First(subset, x-> ForAll(cayley[x], y-> not y in subset or x=y));
end);

###############################################################################
#

InstallGlobalFunction(CongruencesSemilatticeByCayleyGraphNC,
function(elts, cayley, subset, convex, current)
local cong_list, min, j, subset2, convex2, k, lower, restrict, l, ll, x, y,
 stop, current2;

Info(InfoMonoidCongruences, 4, "CongruencesSemilatticeByCayleyGraphNC");

cong_list:=[]; 

min:=OneMinimalEltSemilatticeByCayleyGraph(cayley, subset);

for j in [1..Length(convex)] do
  if min in convex[j] then
    subset2:=Difference(subset, convex[j]);
    convex2:=[];
    current2:=Concatenation(current, [convex[j]]);
    if not subset2=[] then 
      
			for k in Filtered(convex, x-> IsSubset(subset2, x)) do 
			  # JDM compute lower and restrict at the start! Maybe also 
			  # don't consider singletons in current2 and restrict
				lower:=Difference(Union(cayley{k}), k);
				restrict:=List(lower, x-> List(Set(elts{k}*elts[x]), 
				 x-> Position(elts, x)));
				if Length(restrict)>0 then 
					l:=0; 
					stop:=false;
			 
					repeat
						l:=l+1;
						x:=restrict[l];
						ll:=0;
						repeat
							ll:=ll+1;
							y:=current2[ll];
							if not Intersection(x,y)=[] and not IsSubset(y, x) then 
								stop:=true;
							fi;
						until stop or ll=Length(current2);
					until stop or l=Length(restrict);

					if not stop then 
						Add(convex2, k);
					fi;
				else
					convex2:=Filtered(convex, x-> IsSubset(subset2, x));
				fi;
			od;
      Append(cong_list, List(CongruencesSemilatticeByCayleyGraphNC(elts, 
       cayley, subset2, convex2, current2), x-> Concatenation(x, [convex[j]])));
    else
      Add(cong_list, [convex[j]]);
    fi;
  fi;
od;

#return cong_list;
return Set(List(cong_list, Set));
end);

###############################################################################
#

InstallGlobalFunction(CongruencesSemilatticeByCayleyGraph,
function(arg) 
local elts, cayley, s;

Info(InfoMonoidCongruences, 4, "CongruencesSemilatticeByCayleyGraph");

if Length(arg)=1 and IsSemilatticeAsSemigroup(arg[1]) then 
  elts:=Elements(arg[1]);
  s:=Semigroup(elts);
  SetIsFinite(s, true);
  cayley:=CayleyGraphSemigroup(s);
elif Length(arg)=2 and IsSemilatticeAsSemigroup(Semigroup(arg[1])) then 
  elts:=arg[1];
  cayley:=arg[2];
else
  Info(InfoWarning, 1, "Usage: semilattice or the elements of semilattice", 
   " and Cayley graph");
  return fail;
fi;

return CongruencesSemilatticeByCayleyGraphNC(elts, cayley, [1..Length(elts)], 
   ConvexSubsemigroupsByCayleyGraph(elts, cayley), []);
   
end);

###############################################################################
#

InstallOtherMethod(CongruencesSemilattice, "for a semilattice", 
[IsSemilatticeAsSemigroup],
function(s) 
local t;
Info(InfoMonoidCongruences, 4, "CongruencesSemilattice");

if IsSemilatticeAsSemigroup(s) then
  t:=Semigroup(Elements(s));
  SetIsFinite(t, true);
  return List(CongruencesSemilatticeByCayleyGraph(s), 
   x-> List(x, y-> Elements(s){y}));
fi;

Info(InfoWarning, 1, "Usage: semilattice as semigroup");
return fail;
end);

###############################################################################
#

InstallGlobalFunction(IsCongruenceOfSemilattice, "for a partition of the elements of a semilattice",
function(s, p)
local i, j, k;

Info(InfoMonoidCongruences, 4, "IsCongruenceOfSemilattice");

for i in p do 
  for j in s do 
    k:=i*j;
    if not ForAny(p, x-> IsSubset(x, k)) then 
      return false;
    fi;
  od;
od;

return true;
end);

###############################################################################
# an m-generated semilattice on n points

RandomSemilatticeAsSemigroup:=function(m,n)
local out, img, i;
out:=List([1..m], x-> ListWithIdenticalEntries(n,n));

for i in [1..m] do 
  img:=AsSet(List([1..Random([1..n])], x-> Random([1..n])));
  out[i]{img}:=img;
  out[i]:=TransformationNC(out[i]);
od;

return Semigroup(out);
end;


if not IsBound(IsCongruenceOfSmallSemigroup) then 
DeclareGlobalFunction("IsCongruenceOfSmallSemigroup");

###############################################################################
# is a partition of [1..n] a congruence of the small semigroup with n elts

InstallGlobalFunction(IsCongruenceOfSmallSemigroup,
function(s, part)
local gens, x, p, new;

gens:=MinimalGeneratingSet(s);

for x in gens do 
  for p in part do 
    new:=List(Elements(s){p}*x, y-> y!.index);
    if not ForAny(part, y-> IsSubset(y, new)) then 
      return false;
    fi;
  od;
od;

return true;
end);
fi;

###############################################################################
# checks which partitions of [1..n] are congruence of the smallsemi s with n 
# elements

#if not IsBound(CongruencesOfSmallSemigroup) then 
#DeclareGlobalFunction("CongruencesOfSmallSemigroup");

CongruencesOfSmallSemigroup:=function(s)
local part, out, p;

part:=PartitionsSet([1..Size(s)]);
out:=[];

for p in part do 
  if IsCongruenceOfSmallSemigroup(s, p) then 
    #Add(out, List(p, x-> Elements(s){x}));
    Add(out, p);
  fi;
od;

return Set(List(out, Set));
end;

#fi;

###############################################################################
#checks if s is a chain (when s is a semilattice!)

is_chain:=function(s)
local a;
a:=Cartesian(Elements(s), Elements(s));
return ForAll(a, x-> x[1]*x[2]=x[2] or x[1]*x[2]=x[1]);
end;

