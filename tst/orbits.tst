##
## orbits.tst
## Version 3.1.1
## Mon Jun  9 09:26:11 BST 2008
##

#dirs := DirectoriesPackageLibrary( "monoid", "tst" );
#ReadTest( Filename( dirs, "orbits.tst" ) );

gap> START_TEST("orbits.tst 3.1.1");
gap> LoadPackage("monoid");;
gap> g1:=Transformation( [ 2, 6, 5, 10, 6, 9, 2, 8, 2, 7 ] );;
gap> g2:=Transformation( [ 7, 8, 7, 2, 8, 6, 9, 10, 6, 1 ] );;
gap> m:=Monoid(g1, g2);;
gap> MonoidOrbit(m, 1);
[ 1, 2, 7, 6, 8, 9, 10 ]
gap> MonoidOrbit(m, 2);
[ 2, 6, 8, 9, 10, 7, 1 ]
gap> MonoidOrbit(m, 3);
[ 3, 5, 7, 6, 8, 2, 9, 10, 1 ]
gap> MonoidOrbit(m, [1,2,3], OnSets);
[ [ 1, 2, 3 ], [ 2, 5, 6 ], [ 7, 8 ], [ 6, 9 ], [ 6, 8 ], [ 2, 8 ], 
  [ 9, 10 ], [ 2, 9 ], [ 6 ], [ 8, 9 ], [ 6, 10 ], [ 8, 10 ], [ 2, 7 ], 
  [ 1, 6 ], [ 2, 6 ], [ 9 ], [ 7, 9 ], [ 1, 10 ], [ 6, 7 ], [ 2 ], [ 1, 7 ], 
  [ 8 ], [ 10 ], [ 7 ], [ 1 ] ]
gap> MonoidOrbit(m, [1,2,3], OnTuples);
[ [ 1, 2, 3 ], [ 2, 6, 5 ], [ 7, 8, 7 ], [ 6, 9, 6 ], [ 8, 6, 8 ], 
  [ 2, 8, 2 ], [ 9, 10, 9 ], [ 9, 2, 9 ], [ 6, 6, 6 ], [ 8, 9, 8 ], 
  [ 10, 6, 10 ], [ 6, 8, 6 ], [ 8, 10, 8 ], [ 2, 7, 2 ], [ 6, 1, 6 ], 
  [ 2, 6, 2 ], [ 9, 9, 9 ], [ 8, 2, 8 ], [ 7, 9, 7 ], [ 1, 6, 1 ], 
  [ 9, 8, 9 ], [ 6, 10, 6 ], [ 8, 7, 8 ], [ 10, 1, 10 ], [ 6, 2, 6 ], 
  [ 6, 7, 6 ], [ 2, 2, 2 ], [ 10, 8, 10 ], [ 9, 6, 9 ], [ 2, 9, 2 ], 
  [ 7, 6, 7 ], [ 9, 7, 9 ], [ 10, 9, 10 ], [ 7, 2, 7 ], [ 1, 7, 1 ], 
  [ 8, 8, 8 ], [ 1, 10, 1 ], [ 10, 10, 10 ], [ 7, 1, 7 ], [ 7, 7, 7 ], 
  [ 1, 1, 1 ] ]
gap> MonoidOrbit(m, [1,2,3]);
[ [ 1, 2, 3 ], [ 2, 5, 6 ], [ 7, 8 ], [ 6, 9 ], [ 6, 8 ], [ 2, 8 ], 
  [ 9, 10 ], [ 2, 9 ], [ 6 ], [ 8, 9 ], [ 6, 10 ], [ 8, 10 ], [ 2, 7 ], 
  [ 1, 6 ], [ 2, 6 ], [ 9 ], [ 7, 9 ], [ 1, 10 ], [ 6, 7 ], [ 2 ], [ 1, 7 ], 
  [ 8 ], [ 10 ], [ 7 ], [ 1 ] ]
gap> MonoidOrbit(m, [[1,2],[3]]);
[ [ [ 1, 2 ], [ 3 ] ], [ [ 2, 6 ], [ 5 ] ], [ [ 7 ], [ 7, 8 ] ], 
  [ [ 6 ], [ 6, 9 ] ], [ [ 6, 8 ], [ 8 ] ], [ [ 2 ], [ 2, 8 ] ], 
  [ [ 9 ], [ 9, 10 ] ], [ [ 2, 9 ], [ 9 ] ], [ [ 6 ] ], [ [ 8 ], [ 8, 9 ] ], 
  [ [ 6, 10 ], [ 10 ] ], [ [ 6 ], [ 6, 8 ] ], [ [ 8 ], [ 8, 10 ] ], 
  [ [ 2 ], [ 2, 7 ] ], [ [ 1, 6 ], [ 6 ] ], [ [ 2 ], [ 2, 6 ] ], [ [ 9 ] ], 
  [ [ 2, 8 ], [ 8 ] ], [ [ 7 ], [ 7, 9 ] ], [ [ 1 ], [ 1, 6 ] ], 
  [ [ 8, 9 ], [ 9 ] ], [ [ 6 ], [ 6, 10 ] ], [ [ 7, 8 ], [ 8 ] ], 
  [ [ 1, 10 ], [ 10 ] ], [ [ 2, 6 ], [ 6 ] ], [ [ 6 ], [ 6, 7 ] ], [ [ 2 ] ], 
  [ [ 8, 10 ], [ 10 ] ], [ [ 6, 9 ], [ 9 ] ], [ [ 2 ], [ 2, 9 ] ], 
  [ [ 6, 7 ], [ 7 ] ], [ [ 7, 9 ], [ 9 ] ], [ [ 9, 10 ], [ 10 ] ], 
  [ [ 2, 7 ], [ 7 ] ], [ [ 1 ], [ 1, 7 ] ], [ [ 8 ] ], [ [ 1 ], [ 1, 10 ] ], 
  [ [ 10 ] ], [ [ 1, 7 ], [ 7 ] ], [ [ 7 ] ], [ [ 1 ] ] ]
gap> MonoidOrbits(m, [1..10]);
[ [ 1, 2, 7, 6, 8, 9, 10 ], [ 2, 6, 8, 9, 10, 7, 1 ], 
  [ 3, 5, 7, 6, 8, 2, 9, 10, 1 ], [ 4, 10, 2, 7, 1, 6, 8, 9 ], 
  [ 5, 6, 8, 9, 10, 2, 7, 1 ], [ 6, 9, 2, 8, 10, 7, 1 ], 
  [ 7, 2, 9, 6, 8, 10, 1 ], [ 8, 10, 7, 1, 2, 9, 6 ], 
  [ 9, 2, 6, 8, 10, 7, 1 ], [ 10, 7, 1, 2, 9, 6, 8 ] ]
gap> MonoidOrbits(m, [[1,2], [3,4]], OnTuples);
[ [ [ 1, 2 ], [ 2, 6 ], [ 7, 8 ], [ 6, 9 ], [ 8, 6 ], [ 2, 8 ], [ 9, 10 ], 
      [ 9, 2 ], [ 6, 6 ], [ 8, 9 ], [ 10, 6 ], [ 6, 8 ], [ 8, 10 ], [ 2, 7 ], 
      [ 6, 1 ], [ 9, 9 ], [ 8, 2 ], [ 7, 9 ], [ 1, 6 ], [ 9, 8 ], [ 6, 10 ], 
      [ 8, 7 ], [ 10, 1 ], [ 6, 2 ], [ 6, 7 ], [ 2, 2 ], [ 10, 8 ], [ 9, 6 ], 
      [ 2, 9 ], [ 7, 6 ], [ 9, 7 ], [ 10, 9 ], [ 7, 2 ], [ 1, 7 ], [ 8, 8 ], 
      [ 1, 10 ], [ 10, 10 ], [ 7, 1 ], [ 7, 7 ], [ 1, 1 ] ], 
  [ [ 3, 4 ], [ 5, 10 ], [ 7, 2 ], [ 6, 7 ], [ 8, 1 ], [ 2, 6 ], [ 9, 8 ], 
      [ 9, 2 ], [ 6, 9 ], [ 8, 2 ], [ 10, 7 ], [ 8, 6 ], [ 2, 8 ], [ 6, 10 ], 
      [ 6, 8 ], [ 6, 6 ], [ 10, 8 ], [ 1, 9 ], [ 8, 9 ], [ 10, 6 ], 
      [ 8, 10 ], [ 9, 7 ], [ 6, 1 ], [ 9, 9 ], [ 7, 8 ], [ 1, 10 ], [ 2, 2 ], 
      [ 7, 6 ], [ 7, 9 ], [ 1, 6 ], [ 8, 7 ], [ 10, 1 ], [ 9, 10 ], [ 2, 7 ], 
      [ 7, 1 ], [ 8, 8 ], [ 2, 9 ], [ 9, 6 ], [ 10, 9 ], [ 1, 7 ], [ 6, 2 ], 
      [ 10, 10 ], [ 7, 7 ], [ 1, 1 ] ] ]
gap> GradedOrbit(m, [1,2], Size);
[ [ [ 6 ], [ 2 ], [ 9 ], [ 8 ], [ 10 ], [ 7 ], [ 1 ] ], 
  [ [ 1, 2 ], [ 2, 6 ], [ 7, 8 ], [ 6, 9 ], [ 6, 8 ], [ 2, 8 ], [ 9, 10 ], 
      [ 2, 9 ], [ 8, 9 ], [ 6, 10 ], [ 8, 10 ], [ 2, 7 ], [ 1, 6 ], [ 7, 9 ], 
      [ 1, 10 ], [ 6, 7 ], [ 1, 7 ] ] ]
gap> GradedOrbit(m, [1,2], OnTuples, Size);
[ [  ], 
  [ [ 1, 2 ], [ 2, 6 ], [ 7, 8 ], [ 6, 9 ], [ 8, 6 ], [ 2, 8 ], [ 9, 10 ], 
      [ 9, 2 ], [ 6, 6 ], [ 8, 9 ], [ 10, 6 ], [ 6, 8 ], [ 8, 10 ], [ 2, 7 ], 
      [ 6, 1 ], [ 9, 9 ], [ 8, 2 ], [ 7, 9 ], [ 1, 6 ], [ 9, 8 ], [ 6, 10 ], 
      [ 8, 7 ], [ 10, 1 ], [ 6, 2 ], [ 6, 7 ], [ 2, 2 ], [ 10, 8 ], [ 9, 6 ], 
      [ 2, 9 ], [ 7, 6 ], [ 9, 7 ], [ 10, 9 ], [ 7, 2 ], [ 1, 7 ], [ 8, 8 ], 
      [ 1, 10 ], [ 10, 10 ], [ 7, 1 ], [ 7, 7 ], [ 1, 1 ] ] ]
gap> GradedOrbit(m, [[1],[2]], OnSetsSets, Size);
[ [ [ [ 6 ] ], [ [ 2 ] ], [ [ 9 ] ], [ [ 8 ] ], [ [ 10 ] ], [ [ 7 ] ], 
      [ [ 1 ] ] ], 
  [ [ [ 1 ], [ 2 ] ], [ [ 2 ], [ 6 ] ], [ [ 7 ], [ 8 ] ], [ [ 6 ], [ 9 ] ], 
      [ [ 6 ], [ 8 ] ], [ [ 2 ], [ 8 ] ], [ [ 9 ], [ 10 ] ], [ [ 2 ], [ 9 ] ],
      [ [ 8 ], [ 9 ] ], [ [ 6 ], [ 10 ] ], [ [ 8 ], [ 10 ] ], 
      [ [ 2 ], [ 7 ] ], [ [ 1 ], [ 6 ] ], [ [ 7 ], [ 9 ] ], [ [ 1 ], [ 10 ] ],
      [ [ 6 ], [ 7 ] ], [ [ 1 ], [ 7 ] ] ] ]
gap> ShortOrbit(m, [1,2,2,2,2], OnTuples, Sum);
[ [ 1, 2, 2, 2, 2 ] ]
gap> ShortOrbit(m, [1,2,2,2,2], OnTuples, Size);
[ [ 1, 2, 2, 2, 2 ], [ 2, 6, 6, 6, 6 ], [ 7, 8, 8, 8, 8 ], [ 6, 9, 9, 9, 9 ], 
  [ 8, 6, 6, 6, 6 ], [ 2, 8, 8, 8, 8 ], [ 9, 10, 10, 10, 10 ], 
  [ 9, 2, 2, 2, 2 ], [ 6, 6, 6, 6, 6 ], [ 8, 9, 9, 9, 9 ], [ 10, 6, 6, 6, 6 ],
  [ 6, 8, 8, 8, 8 ], [ 8, 10, 10, 10, 10 ], [ 2, 7, 7, 7, 7 ], 
  [ 6, 1, 1, 1, 1 ], [ 9, 9, 9, 9, 9 ], [ 8, 2, 2, 2, 2 ], [ 7, 9, 9, 9, 9 ], 
  [ 1, 6, 6, 6, 6 ], [ 9, 8, 8, 8, 8 ], [ 6, 10, 10, 10, 10 ], 
  [ 8, 7, 7, 7, 7 ], [ 10, 1, 1, 1, 1 ], [ 6, 2, 2, 2, 2 ], [ 6, 7, 7, 7, 7 ],
  [ 2, 2, 2, 2, 2 ], [ 10, 8, 8, 8, 8 ], [ 9, 6, 6, 6, 6 ], [ 2, 9, 9, 9, 9 ],
  [ 7, 6, 6, 6, 6 ], [ 9, 7, 7, 7, 7 ], [ 10, 9, 9, 9, 9 ], [ 7, 2, 2, 2, 2 ],
  [ 1, 7, 7, 7, 7 ], [ 8, 8, 8, 8, 8 ], [ 1, 10, 10, 10, 10 ], 
  [ 10, 10, 10, 10, 10 ], [ 7, 1, 1, 1, 1 ], [ 7, 7, 7, 7, 7 ], 
  [ 1, 1, 1, 1, 1 ] ]
gap> StrongOrbit(m, 1);
[ 1, 2, 6, 9, 8, 10, 7 ]
gap> ForAll(last, x-> Set(StrongOrbit(m, x))=Set(last));
true
gap> StrongOrbit(m, 1, OnPoints);   
[ 1, 2, 6, 9, 8, 10, 7 ]
gap> StrongOrbit(m, [1], OnSets);  
[ [ 1 ], [ 2 ], [ 7 ], [ 6 ], [ 8 ], [ 9 ], [ 10 ] ]
gap> StrongOrbit(m, [1,2], OnSets);
[ [ 1, 2 ] ]
gap> StrongOrbit(m, [1,2], OnTuples);
[ [ 1, 2 ] ]
gap> StrongOrbit(m, [[1,2]], OnTuplesSets);
[ [ [ 1, 2 ] ] ]
gap> StrongOrbits(m, [1..10]);
[ [ 1, 2, 6, 9, 8, 10, 7 ], [ 5 ], [ 3 ], [ 4 ] ]
gap> list:=List(GeneratorsOfMonoid(m), ImageSetOfTransformation);              
[ [ 2, 5, 6, 7, 8, 9, 10 ], [ 1, 2, 6, 7, 8, 9, 10 ] ]
gap> StrongOrbits(m, list, OnSets);
[ [ [ 2, 5, 6, 7, 8, 9, 10 ] ], [ [ 1, 2, 6, 7, 8, 9, 10 ] ] ]
gap> StrongOrbits(m, list, OnTuples);
[ [ [ 2, 5, 6, 7, 8, 9, 10 ] ], [ [ 1, 2, 6, 7, 8, 9, 10 ] ] ]
gap> StrongOrbits(m, [[2,3,1]], OnTuples);
[ [ [ 2, 3, 1 ] ] ]
gap> GradedStrongOrbit(m, [1,2], OnSets, Size);  
[ [ [ 1, 2 ] ] ] 
gap> Combinations([1..10], 2);
[ [ 1, 2 ], [ 1, 3 ], [ 1, 4 ], [ 1, 5 ], [ 1, 6 ], [ 1, 7 ], [ 1, 8 ], 
  [ 1, 9 ], [ 1, 10 ], [ 2, 3 ], [ 2, 4 ], [ 2, 5 ], [ 2, 6 ], [ 2, 7 ], 
  [ 2, 8 ], [ 2, 9 ], [ 2, 10 ], [ 3, 4 ], [ 3, 5 ], [ 3, 6 ], [ 3, 7 ], 
  [ 3, 8 ], [ 3, 9 ], [ 3, 10 ], [ 4, 5 ], [ 4, 6 ], [ 4, 7 ], [ 4, 8 ], 
  [ 4, 9 ], [ 4, 10 ], [ 5, 6 ], [ 5, 7 ], [ 5, 8 ], [ 5, 9 ], [ 5, 10 ], 
  [ 6, 7 ], [ 6, 8 ], [ 6, 9 ], [ 6, 10 ], [ 7, 8 ], [ 7, 9 ], [ 7, 10 ], 
  [ 8, 9 ], [ 8, 10 ], [ 9, 10 ] ]
gap> List(last, x-> StrongOrbit(m, x, OnSets));
[ [ [ 1, 2 ] ], [ [ 1, 3 ] ], [ [ 1, 4 ] ], [ [ 1, 5 ] ], 
  [ [ 1, 6 ], [ 2, 9 ], [ 6, 7 ], [ 2, 6 ], [ 6, 8 ], [ 6, 9 ], [ 8, 9 ], 
      [ 6, 10 ], [ 2, 8 ], [ 7, 9 ], [ 8, 10 ], [ 7, 8 ], [ 1, 10 ], 
      [ 9, 10 ], [ 2, 7 ], [ 1, 7 ] ], 
  [ [ 1, 7 ], [ 7, 9 ], [ 6, 9 ], [ 2, 9 ], [ 2, 6 ], [ 6, 8 ], [ 8, 9 ], 
      [ 6, 10 ], [ 2, 8 ], [ 1, 6 ], [ 8, 10 ], [ 6, 7 ], [ 7, 8 ], 
      [ 1, 10 ], [ 9, 10 ], [ 2, 7 ] ], [ [ 1, 8 ] ], [ [ 1, 9 ] ], 
  [ [ 1, 10 ], [ 2, 7 ], [ 1, 7 ], [ 2, 6 ], [ 8, 9 ], [ 7, 9 ], [ 6, 9 ], 
      [ 6, 8 ], [ 2, 8 ], [ 6, 10 ], [ 2, 9 ], [ 8, 10 ], [ 1, 6 ], [ 7, 8 ], 
      [ 6, 7 ], [ 9, 10 ] ], [ [ 2, 3 ] ], [ [ 2, 4 ] ], [ [ 2, 5 ] ], 
  [ [ 2, 6 ], [ 6, 9 ], [ 6, 8 ], [ 2, 9 ], [ 8, 9 ], [ 6, 10 ], [ 2, 8 ], 
      [ 7, 9 ], [ 1, 6 ], [ 8, 10 ], [ 6, 7 ], [ 7, 8 ], [ 1, 10 ], 
      [ 9, 10 ], [ 2, 7 ], [ 1, 7 ] ], 
  [ [ 2, 7 ], [ 2, 6 ], [ 8, 9 ], [ 6, 9 ], [ 6, 8 ], [ 2, 8 ], [ 6, 10 ], 
      [ 2, 9 ], [ 8, 10 ], [ 7, 9 ], [ 1, 6 ], [ 7, 8 ], [ 1, 10 ], [ 6, 7 ], 
      [ 9, 10 ], [ 1, 7 ] ], 
  [ [ 2, 8 ], [ 6, 8 ], [ 8, 10 ], [ 8, 9 ], [ 6, 10 ], [ 7, 8 ], [ 1, 10 ], 
      [ 7, 9 ], [ 1, 6 ], [ 9, 10 ], [ 2, 7 ], [ 1, 7 ], [ 6, 9 ], [ 2, 9 ], 
      [ 6, 7 ], [ 2, 6 ] ], 
  [ [ 2, 9 ], [ 2, 6 ], [ 6, 8 ], [ 6, 9 ], [ 8, 9 ], [ 6, 10 ], [ 2, 8 ], 
      [ 7, 9 ], [ 1, 6 ], [ 8, 10 ], [ 6, 7 ], [ 7, 8 ], [ 1, 10 ], 
      [ 9, 10 ], [ 2, 7 ], [ 1, 7 ] ], [ [ 2, 10 ] ], [ [ 3, 4 ] ], 
  [ [ 3, 5 ] ], [ [ 3, 6 ] ], [ [ 3, 7 ] ], [ [ 3, 8 ] ], [ [ 3, 9 ] ], 
  [ [ 3, 10 ] ], [ [ 4, 5 ] ], [ [ 4, 6 ] ], [ [ 4, 7 ] ], [ [ 4, 8 ] ], 
  [ [ 4, 9 ] ], [ [ 4, 10 ] ], [ [ 5, 6 ] ], [ [ 5, 7 ] ], [ [ 5, 8 ] ], 
  [ [ 5, 9 ] ], [ [ 5, 10 ] ], 
  [ [ 6, 7 ], [ 2, 9 ], [ 6, 9 ], [ 2, 6 ], [ 6, 8 ], [ 8, 9 ], [ 6, 10 ], 
      [ 2, 8 ], [ 7, 9 ], [ 1, 6 ], [ 8, 10 ], [ 7, 8 ], [ 1, 10 ], 
      [ 9, 10 ], [ 2, 7 ], [ 1, 7 ] ], 
  [ [ 6, 8 ], [ 8, 9 ], [ 6, 10 ], [ 2, 8 ], [ 7, 9 ], [ 1, 6 ], [ 8, 10 ], 
      [ 6, 9 ], [ 2, 9 ], [ 6, 7 ], [ 7, 8 ], [ 1, 10 ], [ 2, 6 ], [ 9, 10 ], 
      [ 2, 7 ], [ 1, 7 ] ], 
  [ [ 6, 9 ], [ 2, 9 ], [ 2, 6 ], [ 6, 8 ], [ 8, 9 ], [ 6, 10 ], [ 2, 8 ], 
      [ 7, 9 ], [ 1, 6 ], [ 8, 10 ], [ 6, 7 ], [ 7, 8 ], [ 1, 10 ], 
      [ 9, 10 ], [ 2, 7 ], [ 1, 7 ] ], 
  [ [ 6, 10 ], [ 7, 9 ], [ 1, 6 ], [ 6, 9 ], [ 2, 9 ], [ 6, 7 ], [ 2, 6 ], 
      [ 6, 8 ], [ 8, 9 ], [ 2, 8 ], [ 8, 10 ], [ 7, 8 ], [ 1, 10 ], 
      [ 9, 10 ], [ 2, 7 ], [ 1, 7 ] ], 
  [ [ 7, 8 ], [ 2, 8 ], [ 9, 10 ], [ 6, 8 ], [ 8, 10 ], [ 2, 7 ], [ 1, 6 ], 
      [ 8, 9 ], [ 6, 10 ], [ 1, 10 ], [ 2, 6 ], [ 2, 9 ], [ 6, 7 ], [ 7, 9 ], 
      [ 1, 7 ], [ 6, 9 ] ], 
  [ [ 7, 9 ], [ 6, 9 ], [ 2, 9 ], [ 2, 6 ], [ 6, 8 ], [ 8, 9 ], [ 6, 10 ], 
      [ 2, 8 ], [ 1, 6 ], [ 8, 10 ], [ 6, 7 ], [ 7, 8 ], [ 1, 10 ], 
      [ 9, 10 ], [ 2, 7 ], [ 1, 7 ] ], [ [ 7, 10 ] ], 
  [ [ 8, 9 ], [ 2, 8 ], [ 6, 10 ], [ 6, 8 ], [ 8, 10 ], [ 7, 9 ], [ 1, 6 ], 
      [ 7, 8 ], [ 1, 10 ], [ 6, 9 ], [ 2, 9 ], [ 6, 7 ], [ 9, 10 ], [ 2, 7 ], 
      [ 1, 7 ], [ 2, 6 ] ], 
  [ [ 8, 10 ], [ 7, 8 ], [ 1, 10 ], [ 2, 8 ], [ 9, 10 ], [ 2, 7 ], [ 1, 7 ], 
      [ 6, 8 ], [ 1, 6 ], [ 2, 6 ], [ 8, 9 ], [ 7, 9 ], [ 6, 10 ], [ 2, 9 ], 
      [ 6, 7 ], [ 6, 9 ] ], 
  [ [ 9, 10 ], [ 2, 7 ], [ 1, 6 ], [ 2, 6 ], [ 8, 9 ], [ 2, 9 ], [ 6, 7 ], 
      [ 6, 9 ], [ 6, 8 ], [ 2, 8 ], [ 6, 10 ], [ 8, 10 ], [ 7, 9 ], [ 7, 8 ], 
      [ 1, 10 ], [ 1, 7 ] ] ]
gap> GradedStrongOrbit(m, [1,6], OnSets, x-> Minimum(6, Minimum(x)));
[ [ [ 1, 6 ], [ 1, 10 ], [ 1, 7 ] ] ]
gap> StrongOrbit(m,[1,6], OnSets);
[ [ 1, 6 ], [ 2, 9 ], [ 6, 7 ], [ 2, 6 ], [ 6, 8 ], [ 6, 9 ], [ 8, 9 ], 
  [ 6, 10 ], [ 2, 8 ], [ 7, 9 ], [ 8, 10 ], [ 7, 8 ], [ 1, 10 ], [ 9, 10 ], 
  [ 2, 7 ], [ 1, 7 ] ]
gap> g:=Transformation([1,2,4,5,6,3,7,8]);;
gap> a:=Transformation([3,3,4,5,6,2,7,8]);;
gap> b:=Transformation([1,2,5,3,6,8,4,4]);;
gap> c1:=Semigroup(g,a,b);;
gap>  GreensDClasses(c1);
[ {Transformation( [ 1 .. 8 ] )}, 
  {Transformation( [ 3, 3, 4, 5, 6, 2, 7, 8 ] )}, 
  {Transformation( [ 1, 2, 5, 3, 6, 8, 4, 4 ] )}, 
  {Transformation( [ 3, 3, 6, 4, 2, 8, 5, 5 ] )} ]
gap> set:=ImageSetOfTransformation(Representative(last[4]));
[ 2, 3, 4, 5, 6, 8 ]
#gap> Size(MonoidStabiliser(c1,set));
#864
gap>  Size(c1);
864
gap> g1:=Transformation([3,3,2,6,2,4,4,6,3,4,6]);;
gap> g2:=Transformation([4,4,6,1,3,3,3,3,11,11,11]);;
gap> g3:=Transformation([2,2,3,4,4,6,6,6,6,6,11]);;
gap> m8:=Monoid(g1,g2,g3);;
gap> MonoidOrbit(m8, 1);
[ 1, 3, 4, 2, 6 ]
gap> MonoidOrbit(m8, [1,2], OnSets);
[ [ 1, 2 ], [ 3 ], [ 4 ], [ 2 ], [ 6 ], [ 1 ] ]
gap> MonoidOrbit(m8, [1,2], OnTuples);
[ [ 1, 2 ], [ 3, 3 ], [ 4, 4 ], [ 2, 2 ], [ 6, 6 ], [ 1, 1 ] ]
gap> MonoidOrbit(m8, 2, OnPoints);
[ 2, 3, 4, 6, 1 ]
gap> MonoidOrbits(m8, [1,2]);
[ [ 1, 3, 4, 2, 6 ], [ 2, 3, 4, 6, 1 ] ]
gap> MonoidOrbits(m8, [[1,2], [2,3]], OnSets);
[ [ [ 1, 2 ], [ 3 ], [ 4 ], [ 2 ], [ 6 ], [ 1 ] ], 
  [ [ 2, 3 ], [ 4, 6 ], [ 1, 3 ] ] ]
gap> GradedOrbit(m8, [1,2], OnSets, Size);
[ [ [ 3 ], [ 4 ], [ 2 ], [ 6 ], [ 1 ] ], [ [ 1, 2 ] ] ]
gap> GradedOrbit(m8, [1,2], Size);
[ [ [ 3 ], [ 4 ], [ 2 ], [ 6 ], [ 1 ] ], [ [ 1, 2 ] ] ]
gap> GradedOrbit(m8, [1,3,4], OnTuples, function(x)
> if 1 in x then return 2;
> else return 1;
> fi;
> end); 
[ [ [ 3, 2, 6 ], [ 2, 3, 4 ], [ 6, 4, 3 ], [ 4, 6, 2 ] ], 
  [ [ 1, 3, 4 ], [ 4, 6, 1 ], [ 3, 1, 6 ] ] ]
gap> ShortOrbit(m8, [1,2], Size);
[ [ 1, 2 ] ]
gap> ShortOrbit(m8, [2,4], Size);
[ [ 2, 4 ], [ 3, 6 ], [ 1, 4 ] ]
gap> ShortOrbit(m8, [1,2], OnTuples, Size);
[ [ 1, 2 ], [ 3, 3 ], [ 4, 4 ], [ 2, 2 ], [ 6, 6 ], [ 1, 1 ] ]
gap> StrongOrbit(m8, 4, OnPoints);
[ 1, 3, 2, 4, 6 ]
gap> StrongOrbit(m8, 4); 
[ 1, 3, 2, 4, 6 ]
gap> StrongOrbit(m8, [2,3], OnSets);
[ [ 2, 3 ], [ 4, 6 ], [ 1, 3 ] ] 
gap> StrongOrbit(m8, [2,3], OnTuples);
[ [ 2, 3 ], [ 3, 2 ], [ 4, 6 ], [ 6, 4 ], [ 1, 3 ], [ 3, 1 ] ]
gap> StrongOrbits(m8, [1..6]);        
[ [ 1, 3, 2, 4, 6 ], [ 5 ] ]
gap> StrongOrbits(m8, [[1,2],[2,3]], OnSets);
[ [ [ 1, 2 ] ], [ [ 2, 3 ], [ 4, 6 ], [ 1, 3 ] ] ]
gap> StrongOrbits(m8, [[1,2],[2,3]], OnTuples);
[ [ [ 1, 2 ] ], [ [ 2, 3 ], [ 3, 2 ], [ 4, 6 ], [ 6, 4 ], [ 1, 3 ], [ 3, 1 ]
     ] ]
gap> GradedStrongOrbit(m8, [1,3,4], OnTuples, function(x)
> if 1 in x then return 2; else return 1; fi; end);
[ [ [ 3, 2, 6 ], [ 2, 3, 4 ], [ 6, 4, 3 ], [ 4, 6, 2 ] ], 
  [ [ 1, 3, 4 ], [ 4, 6, 1 ], [ 3, 1, 6 ] ] ]
gap> GradedStrongOrbit(m8, [1,3,4], OnTuples, Size);
[ [ [ 1, 3, 4 ], [ 3, 2, 6 ], [ 4, 6, 1 ], [ 2, 3, 4 ], [ 6, 4, 3 ], 
      [ 4, 6, 2 ], [ 3, 1, 6 ] ] ]
gap> ShortStrongOrbit(m8, [1,3,4], OnTuples, function(x) 
>  if 1 in x then return 2; else return 1; fi; end);
[ [ 1, 3, 4 ], [ 4, 6, 1 ], [ 3, 1, 6 ] ]
gap> STOP_TEST( "properties.tst 3.1.1", 10000);