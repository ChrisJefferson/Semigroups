# If a command fails, exit this script with an error code
set -e

cd ..
mv Semigroups $HOME/semigroups

################################################################################
# Install software necessary for linting: cpplint and gaplint
################################################################################

if [ "$SUITE" == "lint" ]; then

  # Check-out most recent release of cpplint from GitHub
  cd $HOME
  git clone -b master https://github.com/cpplint/cpplint.git lint/cpplint
  cd lint/cpplint
  git checkout `git tag | tail -1`

  # Check out most recent commit of gaplint from GitHub
  cd $HOME
  git clone -b master --depth=1 https://github.com/james-d-mitchell/gaplint lint/gaplint

  # Move Semigroups package into a GAP folder structure, so that cpplint is happy
  cd $HOME
  mkdir gap gap/.git gap/pkg
  mv semigroups $HOME/gap/pkg/semigroups

  exit 0
fi

################################################################################
# Install software necessary for tests and coverage: GAP and packages
################################################################################ 

if [ "$SUITE" != "test" ] && [ "$SUITE" != "coverage" ]; then
  echo -e "\nError, unrecognised Travis suite: $SUITE"
  exit 1
fi

# Display compiler version
$CXX --version

################################################################################
# Install GAP
if [ "$GAP" == "required" ]; then
  cd $HOME/semigroups
  GAP=v`grep "GAPVERS" PackageInfo.g | awk -F'"' '{print $2}'`
fi
echo -e "\nInstalling GAP $GAP into $GAPROOT..."
git clone -b $GAP --depth=1 https://github.com/gap-system/gap.git $GAPROOT
cd $GAPROOT
if [ -f autogen.sh ]; then
  ./autogen.sh
fi
./configure --with-gmp=system $GAP_FLAGS $PKG_FLAGS
make -j4
mkdir pkg

################################################################################
# Move Semigroups into its proper location
mv $HOME/semigroups $GAPROOT/pkg/semigroups

################################################################################
# Download libsemigroups
echo -e "\nDownloading libsemigroups $LIBSEMI into $GAPROOT/pkg/semigroups/src..."
cd $GAPROOT/pkg/semigroups/src
git clone -b $LIBSEMI --depth=1 https://github.com/james-d-mitchell/libsemigroups.git libsemigroups
cd libsemigroups
# The next two lines produce the libsemigroups-config.h file which is required
# for libsemigroups to be compiled. It is included in the distro archive, but 
# not in the repo since it is autogenerated. 
./autogen.sh
./configure 

################################################################################
# Install digraphs, genss, io, orb, and profiling
PKGS=( "digraphs" "genss" "io" "orb" "profiling" )
for PKG in "${PKGS[@]}"; do
  cd $GAPROOT/pkg
  if [ "$PACKAGES" == "newest" ] || [ "$PKG" == "profiling" ]; then
    echo -e "\nGetting latest release of $PKG..."
    VERSION=`curl -s -L https://github.com/gap-packages/$PKG/releases/latest | grep \<title\> | awk -F' ' '{print $2}'`
  else
    echo -e "\nGetting required release of $PKG..."
    VERSION=`grep "\"$PKG\"" $GAPROOT/pkg/semigroups/PackageInfo.g | awk -F'"' '{print $4}' | cut -c3-`
  fi
  echo -e "Downloading $PKG-$VERSION..."
  curl -L -O https://github.com/gap-packages/$PKG/releases/download/v$VERSION/$PKG-$VERSION.tar.gz
  tar xf $PKG-$VERSION.tar.gz
  PKGDIR=`tar -tf $PKG-$VERSION.tar.gz | head -1`
  rm $PKG-$VERSION.tar.gz
  cd $PKGDIR
  if [ -f configure ]; then
    ./configure $PKG_FLAGS
    make
  fi
done

################################################################################
# Install GAPDoc
PKGS=( $GAPDOC )
for PKG in "${PKGS[@]}"; do
  echo -e "\nDownloading $PKG..."
  cd $GAPROOT/pkg
  curl -O https://www.gap-system.org/pub/gap/gap4/tar.gz/packages/$PKG.tar.gz
  PKG_DIR=`tar -tf $PKG.tar.gz | head -1 | cut -f1 -d"/"`
  tar xf $PKG.tar.gz
  rm $PKG.tar.gz
  cd $PKG_DIR
  if [ -f configure ]; then
    ./configure $PKG_FLAGS
    make
  fi
done
