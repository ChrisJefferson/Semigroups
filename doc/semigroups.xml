#############################################################################
##
#W  semigroups.xml
#Y  Copyright (C) 2011-13                                James D. Mitchell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="ClosureSemigroup">
  <ManSection>
    <Func Name="ClosureSemigroup" Arg="S, coll [, opts]"/>
    <Returns>A semigroup or monoid.</Returns>
    <Description>
      This function returns the semigroup or monoid generated by the
      semigroup <A>S</A> and the collection of elements 
      <A>coll</A> after removing duplicates and elements
      from <A>coll</A> that are already in <A>S</A>. The new
      semigroup knows at least as much information about its structure as was
      already known about that of <A>S</A>. <P/>

      If present, the optional third argument <A>opts</A> should be a record
      containing the values of the options for the semigroup being created as
      described in Section <Ref Sect="opts"/>.<P/>

      <Example>
gap> gens:=[ Transformation( [ 2, 6, 7, 2, 6, 1, 1, 5 ] ), 
>  Transformation( [ 3, 8, 1, 4, 5, 6, 7, 1 ] ), 
>  Transformation( [ 4, 3, 2, 7, 7, 6, 6, 5 ] ), 
>  Transformation( [ 7, 1, 7, 4, 2, 5, 6, 3 ] ) ];;
gap> S:=Monoid(gens[1]);;
gap> for i in [2..4] do S:=ClosureSemigroup(S, gens[i]); od;
gap> S;
&lt;transformation monoid on 8 pts with 4 generators>
gap> Size(S);
233606</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="ClosureInverseSemigroup">
   <ManSection>
    <Func Name="ClosureInverseSemigroup"  Arg="S, coll [, opts]"/>
    <Returns>An inverse semigroup or monoid.</Returns>
    <Description>
      This function returns the inverse semigroup or monoid generated by the
      inverse semigroup of partial permutations <A>S</A> and the partial
      permutation collection or partial permutation <A>coll</A> after first
      removing duplicates and partial permutations in <A>coll</A> that are
      already in <A>S</A>. In most cases, the new semigroups knows at least as
      much information about its structure as was already known about that of
      <A>S</A>. <P/>

      If present, the optional third argument <A>opts</A> should be a record
      containing the values of the options for the inverse semigroup being
      created; these options are described in Section <Ref Sect="opts"/>. <P/>

      <Example>
gap> S:=InverseMonoid(
> PartialPerm( [ 1, 2, 3, 5, 6, 7, 8 ], [ 5, 9, 10, 6, 3, 8, 4 ] ),
> PartialPerm( [ 1, 2, 4, 7, 8, 9 ], [ 10, 7, 8, 5, 9, 1 ] ) );;
gap> f:=PartialPerm(
> [ 1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 18, 19, 20 ],
> [ 5, 1, 7, 3, 10, 2, 12, 14, 11, 16, 6, 9, 15 ]);;
gap> S:=ClosureInverseSemigroup(S, f);
&lt;inverse partial perm semigroup on 19 pts with 4 generators>
gap> Size(S);
9744
gap> T:=Idempotents(SymmetricInverseSemigroup(10));;
gap> S:=ClosureInverseSemigroup(S, T);
&lt;inverse partial perm semigroup on 19 pts with 854 generators>
gap> S:=InverseSemigroup(SmallGeneratingSet(S));
&lt;inverse partial perm semigroup on 19 pts with 14 generators></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="Monoid">
  <ManSection>
    <Func Name="Monoid" Arg="obj1, obj2, ... [, opts]"/>
    <Func Name="Semigroup" Arg="obj1, obj2, ... [, opts]"/>
    <Returns>A monoid or semigroup.</Returns>
    <Description>
 
      If <A>obj1</A>, <A>obj2</A>, ... are (any combination) of
      transformations, transformation semigroups, or lists of transformations,
      then <C>Monoid</C> or <C>Semigroup</C> returns the monoid or semigroup
      generated by the union of <A>obj1</A>, <A>obj2</A>, ....  <P/>

      If present, the optional final argument <A>opts</A> should be a record
      containing the values of the options for the semigroup being created, as
      described in Section <Ref Sect="opts"/>.<P/>
      
      When applied to arguments other than transformations or transformation
      collections these functions behave precisely as described in the
      reference manual. Please consult <Ref Func="Monoid" BookName="ref"/> and
      <Ref Func="Semigroup" BookName="ref"/> for further details.<P/> 

      As an example of how the syntax provided by &Semigroups; can be
      convenient:
      <C>U:=Semigroup(S, f, Idempotents(T));</C>, in the example below, returns
      the same value as: <C>U:=Semigroup(Concatenation(Generators(S), [f],
      Idempotents(T)));</C>.

      <Example>
gap> S:=Semigroup(Transformation( [ 1, 3, 4, 1, 3, 5 ] ), 
> Transformation( [ 5, 1, 6, 1, 6, 3 ] ) );;
gap> f:=Transformation( [ 2, 4, 6, 1, 6, 5 ] );;
gap> T:=Monoid(Transformation( [ 4, 1, 2, 6, 2, 1 ] ),
> Transformation( [ 5, 2, 5, 3, 5, 3 ] ) );;
gap> U:=Semigroup(S, f, Idempotents(T));
&lt;semigroup with 14 generators>
gap> Size(U);
2182
gap> NrRClasses(U);
53</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="InverseMonoid">
  <ManSection>
    <Func Name="InverseMonoid"  Arg="obj1, obj2, ... [, opts]"/>
    <Func Name="InverseSemigroup"  Arg="obj1, obj2, ... [, opts]"/>
    <Returns>An inverse semigroup or monoid.</Returns>
    <Description>
      If <A>obj1</A>, <A>obj2</A>, ... are (any combination) of
      partial permutations, partial permutation semigroup, or lists of partial
      permutations, then <C>InverseMonoid</C> or <C>InverseSemigroup</C>
      returns the inverse monoid or semigroup generated by the union of
      <A>obj1</A>, <A>obj2</A>, ... which equals the semigroup or
      monoid generated by the union of <A>obj1</A>, <A>obj2</A>, ... and their
      inverses.<P/>

      If present, the optional final argument <A>opts</A> should be a record
      containing the values of the options for the inverse semigroup being
      created, as described in Section <Ref Sect="opts"/>.<P/>

      As an example of how the syntax provided by &Semigroups; can be
      convenient:
      <C>U:=Semigroup(S, f, Idempotents(T));</C>, in the example below, returns
      the same value as: <C>U:=Semigroup(Concatenation(Generators(S), [f],
        Idempotents(T)));</C>.
      <Example>
gap> S:=InverseSemigroup(
> PartialPerm( [ 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 20 ], 
> [ 2, 14, 5, 8, 11, 12, 16, 17, 18, 9, 13, 15, 20, 6, 4 ] ),
> PartialPerm( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17 ], 
> [ 2, 14, 8, 19, 5, 1, 3, 16, 6, 9, 10, 17, 12, 20 ] ));;
gap> f:=PartialPerm( 
> [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
>  18, 20, 22, 23, 25, 26, 30, 31, 32, 33, 34, 39, 40, 42, 43, 45 ], 
> [ 4, 47, 34, 19, 32, 22, 12, 15, 16, 45, 49, 8, 24, 40, 17, 
>  46, 14, 6, 44, 2, 48, 41, 10, 31, 18, 50, 23, 5, 37, 11, 38, 30, 21 ] );;
gap> S:=InverseSemigroup(S, f, Idempotents(SymmetricInverseSemigroup(10)));
&lt;inverse semigroup with 1027 generators>
gap> S:=InverseSemigroup(S, f, Idempotents(SymmetricInverseSemigroup(10)),
> rec(small:=true));
&lt;inverse semigroup with 13 generators>
gap> Size(S);
17147970
gap> S:=InverseMonoid(Generators(S));
&lt;inverse monoid with 13 generators>
gap> Size(S);
17147971</Example>
  </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="InverseMonoidByGenerators">
  <ManSection>
    <Func Name="InverseMonoidByGenerators" Arg="coll[, opts]"/>
    <Func Name="InverseSemigroupByGenerators"  Arg="coll[, opts]"/>
    <Returns>An inverse monoid or semigroup.</Returns>
    <Description>
      If <A>coll</A> is a partial permutation collection, then
      <C>InverseMonoidByGenerators</C> and 
      <C>InverseSemigroupByGenerators</C>
      return the inverse monoid and semigroup generated by <A>coll</A>,
      respectively. <P/>

      If present, the optional second argument <A>opts</A> should be a record
      containing the values of the options for the semigroup being created, as
      described in Section <Ref Sect="opts"/>.<P/> 
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="MonoidByGenerators">
  <ManSection>
    <Meth Name="MonoidByGenerators" Arg="coll[, opts]"/>
    <Meth Name="SemigroupByGenerators" Arg="coll[, opts]"/>
    <Returns>A monoid or semigroup.</Returns>
    <Description>
      If <A>coll</A> is a transformation collection, then
      <C>MonoidByGenerators</C> and <C>SemigroupByGenerators</C> return the
      monoid and semigroup generated by <A>coll</A>, respectively. <P/>

      If present, the optional second argument <A>opts</A> should be a record
      containing the values of the options for the semigroup being created, as
      described in Section <Ref Sect="opts"/>.<P/> 

      When applied to arguments other than transformations or transformation
      collections these functions behave precisely as described in the
      reference manual. Please consult 
      <Ref Func="MonoidByGenerators" BookName="ref"/> and
      <Ref Func="SemigroupByGenerators" BookName="ref"/> for further details.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RandomInverseMonoid">
  <ManSection>
    <Func Name="RandomInverseMonoid" Arg="m,n"/>
    <Func Name="RandomInverseSemigroup"  Arg="m,n"/>
    <Returns>An inverse monoid or semigroup.</Returns>
    <Description>
      Returns  a  random  inverse  monoid  or semigroup of partial
      permutations with degree at most <A>n</A>  with <A>m</A> generators.
      <Example>
gap> S:=RandomInverseSemigroup(10,10);                                
&lt;inverse partial perm semigroup on 10 pts with 10 generators>
gap> S:=RandomInverseMonoid(10,10);   
&lt;inverse partial perm monoid on 10 pts with 10 generators>
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RandomTransformationMonoid">
  <ManSection>
    <Func Name="RandomTransformationMonoid" Arg="m, n"/>
    <Func Name="RandomTransformationSemigroup" Arg="m, n"/>
    <Returns>A transformation semigroup.</Returns>
    <Description>
      Returns a random transformation monoid or semigroup of degree <A>n</A> 
      with <A>m</A> generators.
      <Example>
gap> S:=RandomTransformationMonoid(5,5);
&lt;transformation monoid on 5 pts with 5 generators>
gap> S:=RandomTransformationSemigroup(5,5);
&lt;transformation semigroup on 5 pts with 5 generators></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="SubsemigroupByProperty">
<ManSection>
  <Oper Name="SubsemigroupByProperty" Arg="S, func" Label="for a semigroup and
    function"/>
  <Oper Name="SubsemigroupByProperty" Arg="S, func, limit" Label="for a
    semigroup, function, and limit on the size of the subsemigroup"/>
  <Returns>A semigroup.</Returns>
  <Description>
    <C>SubsemigroupByProperty</C> creates a subsemigroup of the semigroup
    <A>S</A> of transformations or partial permutations consisting of those
    elements fulfilling <A>func</A> (which should be a function returning
    <K>true</K> or <K>false</K>). No test is done to check if the property
    actually defines a subsemigroup. <P/>

    If the optional third argument <A>limit</A> is present and a positive
    integer, then once the subsemigroup has at least <A>limit</A> elements the
    computation stops.
  </Description>
</ManSection>
<#/GAPDoc>
