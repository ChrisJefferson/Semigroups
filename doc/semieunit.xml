############################################################################
##
#W  semieunit.xml
#Y  Copyright (C) 2016                                   Christopher Russell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="IsMcAlisterTripleSemigroup">
  <ManSection>
    <Filt Name = "IsMcAlisterTripleSemigroup" Arg = "S"/>
    <Returns><K>true</K> or <K>false</K>.</Returns>
    <Description>
      This function returns true if <A>S</A> is a McAlister triple semigroup.
      A <E>McAlister triple semigroup</E> is a special representation of an
      E-unitary inverse semigroup <Ref Oper="IsEUnitaryInverseSemigroup"/>
      created by <Ref Oper="McAlisterTripleSemigroup"/>.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="McAlisterTripleSemigroup">
  <ManSection>
    <Oper Name = "McAlisterTripleSemigroup" Arg = "G, X, Y, act"
    Label = "for a group, partial order digraph, semilattice digraph, and action"/>
    <Oper Name = "McAlisterTripleSemigroup" Arg = "G, X, Y"
    Label = "for a group, partial order digraph, and semilattice digraph"/>
    <Oper Name = "McAlisterTripleSemigroup" Arg = "G, X, sub_ver, act"
    Label = "for a group, partial order digraph, homogeneous list, and action"/>
    <Oper Name = "McAlisterTripleSemigroup" Arg = "G, X, sub_ver"
    Label = "for a group, partial order digraph, and homogeneous list"/>
    <Returns>A McAlister triple semigroup.</Returns>
    <Description>

    The following will cover the technical information needed to create
    McAlister triple semigroups in GAP, the underlying theorey can be read in
    the introduction of the section <Ref Sect = "McAlister triple semigroups"/>.

    A McAlister triple semigroup is created from a quadruple
    <A>(G, act, X, Y)</A> where:

    <List> 
      <Item>
        <A>G</A> is a finite group.
      </Item>
      <Item>
        <A>X</A> is a <Ref Oper="Digraph" BookName="Digraphs"/>,
        with integer vertex labels, which is a partial order digraph.
        That latter means that <A>X</A> returns true when input to 
        <Ref Prop= "IsPartialOrderDigraph" BookName="Digraphs"/>.
      </Item>
      <Item>
        <A>Y</A> is a subdigraph of <A>X</A>, possibly with different vertex
        labels, which is a join-semilattice. The latter means that <A>Y</A>
        returns true when input to
        <Ref Prop="IsJoinSemilatticeDigraph" BookName="Digraphs"/>.  
      </Item>
      <Item>
        <A>act</A> is a function which is a right action of <A>G</A> on the
        vertices of <A>X</A>. That is to say, it is a function which takes as
        its first input a vertex of the digraph <A>X</A>, as its second input
        an element of <A>G</A> and returns a vertex of <A>X</A>. Being a
        right action means that <C>act(x,gh)=act(act(x,g),h)</C> holds for
        all <A>x</A> in <A>X</A> and <A>g,h</A> <M>\in</M> <A>G</A>.
        Furthermore the permutation represenation of this action must be a
        subgroup of the automorphism group of <A>X</A>. That means we require
        the following to return true: <P/>
        <C>IsSubgroup(AutomorphismGroup(</C><A>X</A><C>),
          Image(ActionHomomorphism(</C><A>G</A><C>,
            DigraphVertices(</C><A>X</A><C>), </C><A>act</A><C>))</C>.
      </Item>
    </List>

    In addition, <A>(G,X,Y)</A> must be a McAlister triple as described in
    <Ref Sect = "McAlister triple semigroups"/>, where the action of <A>G</A>
    on the vertices of <A>X,Y</A> being <A>act</A>.

    For user convienience, there are multiple versions of
    <C>McAlisterTripleSemigroup</C>. When the argument <A>act</A> is ommitted
    it is assumed to be <Ref Func= "OnPoints" BookName= "ref"/>. Additionally,
    the semilattice argument <A>Y</A> may be replaced by a homogeneous list
    <A>sub_ver</A> of vertices of <A>X</A>. When <A>sub_ver</A> is provided,
    <C>McAlisterTripleSemigroup</C> is called with <A>Y</A> equalling
    <C>InducedSubdigraph(<A>X</A>, <A>sub_ver</A>)</C>.

     <Example><![CDATA[
gap> x := Digraph([[1], [1, 2], [1, 2, 3], [1, 4], [1, 4, 5]]);
<digraph with 5 vertices, 11 edges>
gap> y := InducedSubdigraph(x, [1, 2, 3]);
<digraph with 3 vertices, 6 edges>
gap> A := AutomorphismGroup(x);
Group([ (2,4)(3,5) ])
gap> S := McAlisterTripleSemigroup(A, OnPoints, x, y);
<McAlister triple semigroup over Group([ (2,4)(3,5) ])>
gap> T := McAlisterTripleSemigroup(A, x, y);
<McAlister triple semigroup over Group([ (2,4)(3,5) ])>
gap> T = S;
true
gap> GeneratorsOfSemigroup(T);
[ (1, ()), (2, ()), (3, ()), (1, (2,4)(3,5)) ]
gap> AsSemigroup(IsPartialPermSemigroup, T);
<inverse partial perm monoid of size 4, rank 4 with 4 generators>]]></Example>
  </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="McAlisterTripleSemigroupGroup">
  <ManSection>
    <Attr Name = "McAlisterTripleSemigroupGroup" Arg = "S"/>
    <Returns>A group.</Returns>
    <Description>
      Returns the group used to create the McAlister triple semigroup <A>S</A>
      via <Ref Oper="McAlisterTripleSemigroup"/>.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="McAlisterTripleSemigroupPartialOrder">
  <ManSection>
    <Attr Name = "McAlisterTripleSemigroupPartialOrder" Arg = "S"/>
    <Returns>A partial order digraph.</Returns>
    <Description>
      Returns the partial order digraph used to create the McAlister triple
      semigroup <A>S</A> via <Ref Oper="McAlisterTripleSemigroup"/>.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="McAlisterTripleSemigroupSemilattice">
  <ManSection>
    <Attr Name = "McAlisterTripleSemigroupSemilattice" Arg = "S"/>
   <Returns>A join semilattice digraph.</Returns>
    <Description>
      Returns the join semilattice digraph used to create the McAlister triple
      semigroup <A>S</A> via <Ref Oper="McAlisterTripleSemigroup"/>.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="McAlisterTripleSemigroupAction">
  <ManSection>
    <Attr Name = "McAlisterTripleSemigroupAction" Arg = "S"/>
    <Returns>A group.</Returns>
    <Description>
      Returns the action used to create the McAlister triple semigroup
      <A>S</A> via <Ref Oper="McAlisterTripleSemigroup"/>.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsMcAlisterTripleSemigroupElement">
  <ManSection>
    <Prop Name = "IsMcAlisterTripleSemigroupElement" Arg = "x"/>
    <Prop Name = "IsMTSE" Arg = "x"/>
    <Returns><K>true</K> or <K>false</K>.</Returns>
    <Description>
      Returns true if <A>x</A> has been created by 
      <Ref Oper="McAlisterTripleSemigroupElement"/>. The functions <C>IsMTSE</C>
      and <C>IsMcAlisterTripleSemigroupElement</C> are synonyms. The
      mathematical description of the objects read can be found in the
      introduction to <Ref Sect = "McAlister triple semigroups"/>.

<Example><![CDATA[
gap> x := Digraph([[1], [1, 2], [1, 2, 3], [1, 4], [1, 4, 5]]);
<digraph with 5 vertices, 11 edges>
gap> y := InducedSubdigraph(x, [1, 2, 3]);
<digraph with 3 vertices, 6 edges>
gap> A := AutomorphismGroup(x);
Group([ (2,4)(3,5) ])
gap> S := McAlisterTripleSemigroup(A, OnPoints, x, y);
<McAlister triple semigroup over Group([ (2,4)(3,5) ])>
gap> a := MTSE(S, 1, (2, 4)(3, 5));
(1, (2,4)(3,5))
gap> a * a;
(1, ())
gap> gens := GeneratorsOfSemigroup(S);
[ (1, ()), (2, ()), (3, ()), (1, (2,4)(3,5)) ]
gap> P := AsSemigroup(IsPartialPermSemigroup, S);
<inverse partial perm monoid of size 4, rank 4 with 4 generators>
gap> iso := IsomorphismMcAlisterTripleSemigroup(P);
MappingByFunction( <inverse partial perm monoid of size 4, rank 4 
 with 4 generators>, <McAlister triple semigroup over Group([ (), (),
 (1,2) ])>, function( s ) ... end )
gap> IsIsomorphicSemigroup(Image(iso), S);
true]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="McAlisterTripleSemigroupElement">
  <ManSection>
    <Oper Name = "McAlisterTripleSemigroupElement" Arg = "S, A, g"/>
    <Oper Name = "MTSE" Arg = "S, A, g"/>
    <Returns>A McAlister triple semigroup element.</Returns>
    <Description>
      Returns the <E>McAlister triple semigroup element</E> of the McAlister
      triple semigroup <A>S</A> which corresponds to the semilattice vertex
      <A>A</A> and group element <A>g</A>, if this specifices an element of
      <A>S</A>. For this to specify an element the pair <A>(A,g)</A> must
      satisfy the following:
      
      <A>A</A> acted on by the inverse of <A>g</A> is a vertex of the
      semilattice of the McAlister triple <A>S</A>. <P/> 
      <!--TODO: Ref McAlisterTripleSemilattice -->

      The functions <C>MTSE</C> and <C>McAlisterTripleSemigroupElement</C>
      are synonyms.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsMcAlisterTripleSemigroup">
  <ManSection>
    <Oper Name = "AsMcAlisterTripleSemigroup" Arg = "S"/>
    <Returns>A McAlister triple semigroup.</Returns>
    <Description>
      This function tries to find a McAlister triple semigroup which is
      isomorphic to a given semigroup.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsomorphismMcAlisterTripleSemigroup">
  <ManSection>
    <Oper Name = "IsomorphismMcAlisterTripleSemigroup" Arg = "S"/>
    <Returns>An isomorphism.</Returns>
    <Description>
      This function can be used to find an isomorphism from a given semigroup
      <A>S</A> to an isomorphic McAlister triple semigroup, provided such an
      isomorphism exists.
<Example><![CDATA[
gap> x := Digraph([[1], [1, 2], [1, 2, 3], [1, 4], [1, 4, 5]]);
<digraph with 5 vertices, 11 edges>
gap> y := InducedSubdigraph(x, [1, 2, 3]);
<digraph with 3 vertices, 6 edges>
gap> A := AutomorphismGroup(x);
Group([ (2,4)(3,5) ])
gap> S := McAlisterTripleSemigroup(A, OnPoints, x, y);
<McAlister triple semigroup over Group([ (2,4)(3,5) ])>
gap> T := McAlisterTripleSemigroup(A, x, y);
<McAlister triple semigroup over Group([ (2,4)(3,5) ])>
gap> T = S;
true
gap> a := MTSE(S, 1, (2, 4)(3, 5));
(1, (2,4)(3,5))
gap> a * a;
(1, ())
gap> gens := GeneratorsOfSemigroup(S);
[ (1, ()), (2, ()), (3, ()), (1, (2,4)(3,5)) ]
gap> P := AsSemigroup(IsPartialPermSemigroup, S);
<inverse partial perm monoid of size 4, rank 4 with 4 generators>
gap> IsomorphismMcAlisterTripleSemigroup(P);
MappingByFunction( <inverse partial perm monoid of size 4, rank 4 
 with 4 generators>, <McAlister triple semigroup over Group([ (), (), (1,
2) ])>, function( s ) ... end )
gap> AsMcAlisterTripleSemigroup(P);
<McAlister triple semigroup over Group([ (), (), (1,2) ])>
  ]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="EUnitaryInverseCover">
  <ManSection>
    <Prop Name = "EUnitaryInverseCover" Arg = "S"/>
    <Returns>A homomorphism between semigroups.</Returns>
    <Description>
      If the argument <A>S</A> is an inverse semigroup then this function
      returns a finite E-unitary inverse cover of <A>S</A>. A finite E-unitary
      cover of <A>S</A> is a surjective idempotent separating homomorphism from
      a finite E-unitary inverse semigroup to <A>S</A>. A semigroup
      homomorphism is said to be idempotent separating if no two idempotents
      are mapped to the same element of in the image.
<Example><![CDATA[
gap> S := InverseSemigroup([PartialPermNC([1, 2], [2, 1]),
> PartialPermNC([1], [1])]);
<inverse partial perm semigroup of size 7, rank 2 with 2 generators>
gap> cov := EUnitaryInverseCover(S);
MappingByFunction( <inverse partial perm semigroup of rank 4 with 2 generators>,
<inverse partial perm semigroup of size 7, rank 2 with 2 generators>
 , function( x ) ... end )
gap> IsEUnitaryInverseSemigroup(Source(cov));
true
gap> S = Range(cov);
true]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsFInverseSemigroup">
  <ManSection>
    <Prop Name = "IsFInverseSemigroup" Arg = "S"/>
    <Returns><K>true</K> or <K>false</K>.</Returns>
    <Description>
      This function determines whether a given semigroup is an F-inverse
      semigroup. F-inverse semigroup are a class of E-unitary inverse
      semigroups. A McAlister triple semigroup
      <C>McAlisterTripleSemigroup(G,act,X,Y)</C> is F-inverse precisely when
      the partial order digraph <C>X</C> is a join-semilattice digraph. This
      function uses <Ref Oper = "AsMcAlisterTripleSemigroup"/> to find a
      McAlister triple semigroup isomorphic to <A>S</A> then checks if the
      McAlister triple semigroup is F-inverse.
      <Ref Sect = "McAlister triple semigroups"/>
<Example><![CDATA[
gap> x := Digraph([[1], [1, 2], [1, 2, 3], [1, 4], [1, 4, 5]]);
<digraph with 5 vertices, 11 edges>
gap> y := InducedSubdigraph(x, [1, 2, 3]);
<digraph with 3 vertices, 6 edges>
gap> A := AutomorphismGroup(x);
Group([ (2,4)(3,5) ])
gap> S := McAlisterTripleSemigroup(A, OnPoints, x, y);
<McAlister triple semigroup over Group([ (2,4)(3,5) ])>
gap> T := McAlisterTripleSemigroup(A, x, y);
<McAlister triple semigroup over Group([ (2,4)(3,5) ])>
gap> T = S;
true
gap> a := MTSE(S, 1, (2, 4)(3, 5));
(1, (2,4)(3,5))
gap> a * a;
(1, ())
gap> gens := GeneratorsOfSemigroup(S);
[ (1, ()), (2, ()), (3, ()), (1, (2,4)(3,5)) ]
gap> P := AsSemigroup(IsPartialPermSemigroup, S);
<inverse partial perm monoid of size 4, rank 4 with 4 generators>
gap> IsomorphismMcAlisterTripleSemigroup(P);
MappingByFunction( <inverse partial perm monoid of size 4, rank 4 
 with 4 generators>, <McAlister triple semigroup over Group([ (), (), (1,
2) ])>, function( s ) ... end )
gap> AsMcAlisterTripleSemigroup(P);
<McAlister triple semigroup over Group([ (), (), (1,2) ])>
  ]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>
