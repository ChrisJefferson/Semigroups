#############################################################################
##
#W  slp.xml
#Y  Copyright (C) 2011-13                                James D. Mitchell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="Factorization">
<ManSection> 
  <Meth Name="Factorization" Arg="S, f"/>
    <Returns>A word in the generators.</Returns>
      <Description> 
        If <A>S</A> is a transformation or partial perm semigroup and <A>f</A>
        is an element of <A>S</A>, then <C>Factorization</C> returns
        a word in the generators of <A>S</A> that is equal to <A>f</A>. Here, a
        word is a list of positive integers where <C>i</C> corresponds to
        <C>GeneratorsOfSemigroups(S)[i]</C>. More specifically,
      <Log>EvaluateWord(GeneratorsOfSemigroup(S), Factorization(S, f))=f;</Log>
      <P/>

        Note that <C>Factorization</C> does not return a word of minimum
        length.<P/> 

        See also <Ref Func="EvaluateWord"/> and 
        <Ref Func="GeneratorsOfSemigroup" BookName="ref"/>.
<Example>
gap> gens:=[ Transformation( [ 2, 2, 9, 7, 4, 9, 5, 5, 4, 8 ] ), 
> Transformation( [ 4, 10, 5, 6, 4, 1, 2, 7, 1, 2 ] ) ];;
gap> S:=Semigroup(gens);;
gap> f:=Transformation( [ 1, 10, 2, 10, 1, 2, 7, 10, 2, 7 ] );;
gap> Factorization(S, f);
[ 2, 2, 1, 2 ]
gap> EvaluateWord(gens, last);
Transformation( [ 1, 10, 2, 10, 1, 2, 7, 10, 2, 7 ] )</Example>
    </Description>
  </ManSection>
  <#/GAPDoc>

