#############################################################################
##
#W  properties.xml
#Y  Copyright (C) 2011-13                                James D. Mitchell
##                                                       Wilf Wilson,
##                                                       Rhiannon Dougall,
##                                                       Robert Hancock
##                                                       Casey Donoven
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="VagnerPrestonRepresentation">
<ManSection>
  <Func Name="VagnerPrestonRepresentation" Arg="S"/>
  <Returns>
    An inverse semigroup of partial permutations.
  </Returns>
  <Description>
    <C>VagnerPrestonRepresentation</C> returns an isomorphism from the inverse
    semigroup <A>S</A> to the inverse semigroup of 
    partial permutations <C>T</C> of degree equal to the size of <A>S</A>,
    which is obtained using the Vagner-Preston Representation Theorem. <P/>

    More precisely, if <M>f:S\to T</M> is the isomorphism returned by
    <C>VagnerPrestonRepresentation(<A>S</A>)</C> and <M>x</M> is in <A>S</A>,
    then <M>f(x)</M> is the partial permutation with domain <M>Sx^{-1}</M> and
    range <M>Sx^{-1}x</M> defined by <M>f(x): sx^{-1}\mapsto sx^{-1}x</M>. <P/> 

    In many cases, it is possible to find a smaller degree representation than
    that provided by <C>VagnerPrestonRepresentation</C> using 
    <Ref Attr="IsomorphismPartialPermSemigroup"/> or 
    <Ref Attr="SmallerDegreePartialPermRepresentation"/>.
  </Description>
</ManSection>
<Example>
gap> S:=SymmetricInverseSemigroup(2);                                 
&lt;inverse partial perm semigroup of degree 2 with 2 generators>
gap> Size(S);
7
gap> iso:=VagnerPrestonRepresentation(S);
MappingByFunction(&lt;inverse partial perm semigroup of size 7, degree 2 with 
2 generators>,&lt;inverse partial perm semigroup of degree 7 with 
2 generators>, function( x ) ... end, function( x ) ... end )
gap> RespectsMultiplication(iso);
true
gap> inv:=InverseGeneralMapping(iso);;
gap> ForAll(S, x-> (x^iso)^inv=x);
true
</Example>          
<#/GAPDoc>

<#GAPDoc Label="IsMajorantlyClosed">
<ManSection>
<Oper Name="IsMajorantlyClosed" Arg="S, T"/>
<Returns>
  <K>true</K> or <K>false</K>.
</Returns>
<Description>
  <C>IsMajorantlyClosed</C> determines whether the subset <A>T</A> of the
  inverse semigroup <A>S</A> is majorantly closed in <A>S</A>.<P/> We say 
  that <A>T</A> is majorantly closed in <A>S</A> if it contains all elements
  of <A>S</A> which are greater than or equal to any element of <A>T</A>.<P/>
  Note that <A>T</A> can be a subset of <A>S</A> or an inverse subsemigroup of <A>S</A>.
</Description>
</ManSection>
<Example>
gap> S:=SymmetricInverseSemigroup(2);
&lt;inverse partial perm semigroup of degree 2 with 2 generators>
gap> T:=[Elements(S)[2]];
[ &lt;identity on [ 1 ]> ]
gap> IsMajorantlyClosed(S,T);
false
gap> U:=[Elements(S)[2],Elements(S)[6]];
[ &lt;identity on [ 1 ]>, &lt;identity on [ 1, 2 ]> ]
gap> IsMajorantlyClosed(S,U);           
true
</Example>
<#/GAPDoc>

<#GAPDoc Label="MajorantClosure">
<ManSection>
<Func Name="MajorantClosure" Arg="S,T"/>
  <Returns>
    A majorantly closed subset of <A>S</A>
  </Returns>
  <Description>
    <C>MajorantClosure</C> returns a majorantly closed subset of <A>S</A>. 
    The result contains all elements of <A>S</A> which are greater than or
    equal to any element of <A>T</A>. See <Ref Func="IsMajorantlyClosed"/>.<P/>
    Note that <A>T</A> can be a subset of <A>S</A> or an inverse subsemigroup
    of <A>S</A>.
  </Description>
</ManSection>
<Example>
gap> S:=SymmetricInverseSemigroup(4);
&lt;inverse partial perm semigroup of degree 4 with 3 generators>
gap> T:=[PartialPermNC([1,0,3,0])];
[ &lt;identity on [ 1, 3 ]> ]
gap> U:=MajorantClosure(S,T);
[ &lt;identity on [ 1, 3 ]>, &lt;identity on [ 1, 2, 3]>, [ 1, 2, 3 ] -> [ 1, 4, 3 ], [ 1, 3, 4] -> [ 1, 3, 2 ], &lt;identity on [ 1, 3, 4]>, &lt;identity on [ 1 .. 4 ]>, [ 1 .. 4 ] -> [ 1, 4, 3, 2] ]
</Example>
<#/GAPDoc>

<#GAPDoc Label="SameMinorantsSubgroup">
<ManSection>
<Func Name="SameMinorantsSubgroup" Arg="h"/>
  <Returns>
    A subset of the group H-class <A>h</A>
  </Returns>
  <Description>
    <C>SameMinorantsSubgroup</C> returns the subset of elements of the 
    group H-class 
    <A>h</A> that have the same strict minorants as the identity in <A>h</A>
    within the semigroup containing <A>h</A>.
  </Description>
</ManSection>
<Example>
gap> S:=SymmetricInverseSemigroup(3);
&lt;inverse partial perm semigroup of degree 3 with 3 generators>
gap> h:=GroupHClass(GreensDClasses(S)[1]);
{&lt;identity on [ 1, 2, 3 ]>}
gap> Elements(h);
[ &lt;identity on [ 1, 2, 3 ]>, [ 1, 2, 3 ] -> [ 1, 3, 2 ], [ 1, 2, 3 ] -> [ 2, 1, 3 ], [ 1, 2, 3 ] -> [ 2, 3, 1 ], [ 1, 2, 3 ] -> [ 3, 1, 2 ], [ 1, 2, 3 ] -> [ 3, 2, 1 ] ]
gap> SameMinorantsSubgroup(h);
[ &lt;identity on [ 1, 2, 3 ]> ]
gap> T:=InverseSemigroup(PartialPermNC([1,2,4,3]),PartialPermNC([1]),PartialPermNC([0,2]));
&lt;inverse partial perm semigroup of degree 4 with 3 generators>
gap> Elements(T);
[ &lt;empty mapping>, &lt;identity on [ 1 ]>, &lt;identity on [ 2 ]>, &lt;identity on [ 1 .. 4 ]>, [ 1 .. 4 ] -> [ 1, 2, 4, 3 ] ]
gap> f:=GroupHClass(GreensDClasses(T)[1]);
{&lt;identity on [ 1 .. 4 ]>}
gap> Elements(f);
[ &lt;identity on [ 1 .. 4 ]>, [ 1 .. 4 ] -> [ 1, 2, 4, 3 ] ]
gap> SameMinorantsSubgroup(f);
[ &lt;identity on [ 1 .. 4 ]>, [ 1 .. 4 ] -> [ 1, 2, 4, 3 ] ]
</Example>
<#/GAPDoc>


<#GAPDoc Label="IsJoinIrreducible">
<ManSection>
<Oper Name="IsJoinIrreducible" Arg="S, x"/>
  <Returns>
    <K>true</K> or <K>false</K>
  </Returns>
  <Description>
    <C>IsJoinIrreducible</C> determines whether an element <A>x</A> of an 
    inverse semigroup <A>S</A> is join irreducible.
    An element <A>x</A> is join irreducible when it is not the least upper 
    bound (with
    respect to the natural partial order) of any subset of <A>S</A> 
    not containing <A>x</A>.
  </Description>
</ManSection>
<Example>
gap> S:=SymmetricInverseSemigroup(3);
&lt;inverse partial perm semigroup of degree 3 with 3 generators>
gap> x:=PartialPermNC([1,2,3]);
&lt;identity on [ 1, 2, 3 ]>
gap> IsJoinIrreducible(S,x);
false
gap> T:=InverseSemigroup(PartialPermNC([1,2,4,3]),PartialPermNC([1]),PartialPermNC([0,2]));
&lt;inverse partial perm semigroup of degree 4 with 3 generators>
gap> y:=PartialPermNC([1,2,3,4]);
&lt;identity on [ 1 .. 4 ]>
gap> IsJoinIrreducible(T,y);
true
</Example>
<#/GAPDoc>


<#GAPDoc Label="JoinIrreducibleDClasses">
<ManSection>
<Func Name="JoinIrreducibleDClasses" Arg="S"/>
  <Returns>
    A list of D-Classes
  </Returns>
  <Description>
    <C>JoinIrreducibleDClasses</C> returns a list of the join irreducible
    &D;-classes of the inverse semigroup <A>S</A>.<P/>
    
    A join irreducible &D;-class is a &D;-class containing only join irreducible
    elements.
    See <Ref Oper="IsJoinIrreducible"/>.
    If a &D;-class contains one join irreducible element, all elements in the
    &D;-class are join irreducible.  
<Example>
gap> S:=SymmetricInverseSemigroup(3);
&lt;inverse partial perm semigroup of degree 3 with 3 generators>
gap> JoinIrreducibleDClasses(S);
[ {&lt;identity on [ 1 ]>} ]
gap> T:=InverseSemigroup(PartialPermNC([1,2,4,3]),PartialPermNC([1]),PartialPermNC([0,2]));
&lt;inverse partial perm semigroup of degree 4 with 3 generators>
gap> JoinIrreducibleDClasses(T);
[ {&lt;identity on [ 1 .. 4 ]>}, {&lt;identity on [ 1 ]>}, {&lt;identity on [ 2 ]>} ]
</Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="RightCosetsOfInverseSemigroup">
<ManSection>
<Func Name="RightCosetsOfInverseSemigroup" Arg="S,T"/>
  <Returns>
    A list of lists.
  </Returns>
  <Description>
    <C>RightCosetsOfInverseSemigroup</C> takes a majorantly
    closed inverse subsemigroup <A>T</A> and returns a list of its right cosets 
    (in the inverse semigroup theoretic sense) in <A>S</A>.
  </Description>
</ManSection>
<Example>
gap> S:=SymmetricInverseSemigroup(3);
&lt;inverse partial perm semigroup of degree 3 with 3 generators>
gap> T:=InverseSemigroup(MajorantClosure(S,[PartialPermNC([1])]));
&lt;inverse partial perm semigroup of degree 3 with 8 generators>
gap> IsMajorantlyClosed(S,T);
true
gap> RC:=RightCosetsOfInverseSemigroup(S,T);                           
[ [ &lt;identity on [ 1 ]>, &lt;identity on [ 1, 2 ]>, [ 1, 2 ] -> [ 1, 3 ], [ 1, 3 ] -> [ 1, 2 ], &lt;identity on [ 1, 3 ]>, &lt;identity on [ 1, 2, 3 ]>, [ 1, 2, 3 ] -> [ 1, 3, 2 ] ], [ [ 1 ] -> [ 3 ], [ 1, 2 ] -> [ 3, 1 ], [ 1, 2 ] -> [ 3, 2 ], [ 1, 3 ] -> [ 3, 1 ], [ 1, 3 ] -> [ 3, 2 ], [ 1, 2, 3 ] -> [ 3, 1, 2 ], [ 1, 2, 3 ] -> [ 3, 2, 1 ] ], [ [ 1 ] -> [ 2 ], [ 1, 2 ] -> [ 2, 1 ], [ 1, 2 ] -> [ 2, 3 ], [ 1, 3 ] -> [ 2, 1 ], [ 1, 3 ] -> [ 2, 3 ], [ 1, 2, 3 ] -> [ 2, 1, 3 ], [ 1, 2, 3 ] -> [ 2, 3, 1 ] ] ]
</Example>
<#/GAPDoc>

<#GAPDoc Label="SmallerDegreePartialPermRepresentation">
<ManSection>
<Func Name="SmallerDegreePartialPermRepresentation" Arg="S"/>
  <Returns>
    An isomorphic mapping.
  </Returns>
  <Description>   
    <C>SmallerDegreePartialPermRepresentation</C> attempts to reduce the degree of <A>S</A>,
    an inverse semigroup of partial permutations, and returns a mapping isomorphic to <A>S</A>.
    If the function can not reduce the degree, the identity mapping is returned.<P/>
    Note that there is no guarantee that the smallest possible degree representation is returned.
  </Description>
</ManSection>
<Example>
gap> S:=InverseSemigroup(PartialPermNC([2,1,4,3,6,5,8,7]));
&lt;inverse partial perm semigroup of degree 8 with 1 generator>
gap> Elements(S);                                          
[ &lt;identity on [ 1 .. 8 ]>, [ 1 .. 8 ] -> [ 2, 1, 4, 3, 6, 5, 8, 7 ] ]
gap> T:=SmallerDegreePartialPermRepresentation(S);                    
MappingByFunction( &lt;inverse partial perm semigroup of size 2, degree 8 with 1 generator>, &lt;inverse partial perm semigroup of degree 2 with 1 generator>, function( x ) ... end, function( x ) ... end )
gap> Elements(T);                                          
[ &lt;identity on [ 1, 2 ]>, [ 1, 2 ] -> [ 2, 1 ] ]
</Example>
<#/GAPDoc>

<#GAPDoc Label="Minorants">
<ManSection>
<Oper Name="Minorants" Arg="S,f"/>
	<Returns>
	  A set of partial permutations.
	</Returns>
	<Description>
		<C>Minorants</C> takes an element <A>f</A> from an inverse 
		semigroup <A>S</A> and returns a set of the minorants of <A>f</A> in <A>S</A>.
		A minorant of <A>f</A> is a partial permutation which is strictly less than <A>f</A>
		in the natural partial order of <A>S</A>. See <Ref Oper="NaturalPartialOrder"/>.
	</Description>
</ManSection>
<Example>
gap> s:=SymmetricInverseSemigroup(3);
&lt;inverse partial perm semigroup of degree 3 with 3 generators>
gap> f:=Elements(s)[16];
[ 1, 2 ] -> [ 3, 2 ]
gap> Minorants(s,f);
[ &lt;empty mapping>, [ 1 ] -> [ 3 ], &lt;identity on [ 2 ]> ]
gap> f:=PartialPermNC( [3,2,4,0] );
[ 1, 2, 3 ] -> [ 3, 2, 4 ]
gap> S:=InverseSemigroup(f);
&lt;inverse partial perm semigroup of degree 4 with 1 generator>
gap> Minorants(S,f);
[ &lt;identity on [ 2 ]>, [ 1, 2 ] -> [ 3, 2 ], [ 2, 3 ] -> [ 2, 4 ] ]
</Example>
<#/GAPDoc>

#EOF