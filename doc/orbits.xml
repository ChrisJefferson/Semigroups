
<#GAPDoc Label="GradedImagesOfTransSemigroup">
  <ManSection><Heading>Graded images and kernels</Heading>
  <Attr Name="GradedImagesOfTransSemigroup" Arg="S"/>
  <Attr Name="GradedKernelsOfTransSemigroup" Arg="S"/>
  <Description>
  <C>GradedImagesOfTransSemigroup</C> returns a list where the <C>i</C>th 
  entry is a list of all the images of transformations in <A>S</A> with rank 
  <C>i</C>.  
  <P/>
  
  <C>GradedKernelsOfTransSemigroup</C> returns a list where the <C>i</C>th 
  entry is a list of the values of <Ref Func="CanonicalTransSameKernel"/> for
  all transformations in <A>S</A> with rank <C>i</C>.
  <P/>

  See also <Ref Attr="ImagesOfTransSemigroup"/> and 
  <Ref Attr="KernelsOfTransSemigroup"/>.
  <Example>
gap> S:=Semigroup(Transformation( [ 1, 5, 1, 1, 1 ] ), 
> Transformation( [ 4, 4, 5, 2, 2 ] ));;
gap> GradedImagesOfTransSemigroup(S);
[ [ [ 1 ], [ 4 ], [ 2 ], [ 5 ] ], [ [ 1, 5 ], [ 2, 4 ] ], [ [ 2, 4, 5 ] ], 
  [  ], [  ] ]
gap> GradedKernelsOfTransSemigroup(S);
[ [ [ 1, 1, 1, 1, 1 ] ], [ [ 1, 2, 1, 1, 1 ], [ 1, 1, 1, 2, 2 ] ], 
  [ [ 1, 1, 2, 3, 3 ] ], [  ], [  ] ]</Example> 
  </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="ImagesOfTransSemigroup">
  <ManSection><Heading>Images and kernels</Heading>
  <Attr Name="ImagesOfTransSemigroup" Arg="S[, n]"/>
  <Attr Name="KernelsOfTransSemigroup" Arg="S[, n]"/>
  <Description>
  <C>ImagesOfTransSemigroup</C> returns the  
  <Ref Func="Orb" BookName="orb"/> object:
  <Log>Orb(S, [1..Degree(S)], OnSets);</Log>
  <P/>
  
  <C>KernelsOfTransSemigroup</C> returns the <Ref Func="Orb" BookName="orb"/>
  object:
  <Log>Orb(S, [1,..Degree(S)], OnKernelsAntiAction);</Log>
  <P/>
  If the optional second argument <A>n</A> (a positive integer) is present, 
  then only the images or kernels of size at least <A>n</A> are found.<P/>
 
  Note that the image/kernel <C>[1..Degree(S)]</C> always occurs in both orbits
  even if there is no element of <A>S</A> with image/kernel equal to
  <C>[1..Degree(S)]</C>.<P/>

  See also <Ref Func="GradedImagesOfTransSemigroup"/>,
  <Ref Func="GradedKernelsOfTransSemigroup"/>,
  <Ref Func="OnKernelsAntiAction"/>, and 
  <Ref Func="CanonicalTransSameKernel"/>
  <Example>
gap>  S:=Semigroup( Transformation( [ 6, 4, 4, 4, 6, 1 ] ), 
> Transformation( [ 6, 5, 1, 6, 2, 2 ] ) );;
gap> o:=ImagesOfTransSemigroup(S, 6); Enumerate(o); AsList(o);
&lt;open orbit, 1 points with Schreier tree with grading>
&lt;closed orbit, 1 points with Schreier tree with grading>
[ [ 1 .. 6 ] ]
gap> o:=ImagesOfTransSemigroup(S, 5); Enumerate(o); AsList(o);
&lt;open orbit, 1 points with Schreier tree with grading>
&lt;closed orbit, 1 points with Schreier tree with grading>
[ [ 1 .. 6 ] ]
gap> o:=ImagesOfTransSemigroup(S, 4); Enumerate(o); AsList(o);
&lt;open orbit, 1 points with Schreier tree with grading>
&lt;closed orbit, 2 points with Schreier tree with grading>
[ [ 1 .. 6 ], [ 1, 2, 5, 6 ] ]
gap> o:=ImagesOfTransSemigroup(S, 3); Enumerate(o); AsList(o);
&lt;open orbit, 1 points with Schreier tree with grading>
&lt;closed orbit, 4 points with Schreier tree with grading>
[ [ 1 .. 6 ], [ 1, 4, 6 ], [ 1, 2, 5, 6 ], [ 2, 5, 6 ] ]
gap> o:=ImagesOfTransSemigroup(S, 2); Enumerate(o); AsList(o);
&lt;open orbit, 1 points with Schreier tree with grading>
&lt;closed orbit, 8 points with Schreier tree with grading>
[ [ 1 .. 6 ], [ 1, 4, 6 ], [ 1, 2, 5, 6 ], [ 2, 6 ], [ 2, 5, 6 ], [ 1, 4 ],
  [ 2, 5 ], [ 4, 6 ] ]
gap> o:=ImagesOfTransSemigroup(S, 1); Enumerate(o); AsList(o);
&lt;open orbit, 1 points with Schreier tree with grading>
&lt;closed orbit, 13 points with Schreier tree with grading>
[ [ 1 .. 6 ], [ 1, 4, 6 ], [ 1, 2, 5, 6 ], [ 2, 6 ], [ 2, 5, 6 ], [ 1, 4 ],
  [ 2, 5 ], [ 4, 6 ], [ 6 ], [ 1 ], [ 2 ], [ 4 ], [ 5 ] ]
gap> o:=ImagesOfTransSemigroup(S); Enumerate(o); AsList(o);
&lt;open orbit, 1 points with Schreier tree>
&lt;closed orbit, 13 points with Schreier tree>
[ [ 1 .. 6 ], [ 1, 4, 6 ], [ 1, 2, 5, 6 ], [ 2, 6 ], [ 2, 5, 6 ], [ 1, 4 ],
  [ 2, 5 ], [ 4, 6 ], [ 6 ], [ 1 ], [ 2 ], [ 4 ], [ 5 ] ]</Example>
  </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="OnKernelsAntiAction">
  <ManSection> 
    <Oper Name="OnKernelsAntiAction" Arg="ker, f"/>
    <Description>
    returns <C>CanonicalTransSameKernel(f*g)</C> when <A>f</A> is a
    transformation and <A>g</A> is a transformation with
    <C>CanonicalTransSameKernel(<A>g</A>)=ker</C>.
    See <Ref Func="CanonicalTransSameKernel"/>.
    <Example>
gap> f:=Transformation( [ 3, 6, 9, 2, 4, 2, 2, 2, 8, 2 ] );;
gap> g:=Transformation( [ 7, 1, 4, 3, 2, 7, 7, 6, 6, 5 ] );;
gap> ker:=CanonicalTransSameKernel(f);
[ 1, 2, 3, 4, 5, 4, 4, 4, 6, 4 ]
gap> OnKernelsAntiAction(ker, g);
[ 1, 2, 1, 3, 4, 1, 1, 1, 1, 5 ]
gap> CanonicalTransSameKernel(g*f);
[ 1, 2, 1, 3, 4, 1, 1, 1, 1, 5 ]</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="StrongOrbitsInForwardOrbit">
  <ManSection> <Oper Name="StrongOrbitsInForwardOrbit" Arg="o"/>
  <Description>
  returns a list of the strong orbits contained in the <Package>Orb</Package>
  package orbit <A>o</A> provided that <A>o</A> was created with the 
  option <C>orbitgraph</C> set to <C>true</C>. <P/>

  See also <Ref Func="Orb" BookName="orb"/>. 
  <Example>
gap> S:=Semigroup(Transformation( [ 1, 3, 1, 4, 4 ] ), 
> Transformation( [ 3, 1, 4, 2, 1 ] ), 
> Transformation( [ 3, 5, 1, 4, 5 ] ),
> Transformation( [ 4, 5, 2, 3, 4 ] ), 
> Transformation( [ 5, 5, 2, 1, 2 ] ));;
gap> o:=ImagesOfTransSemigroup(S);
&lt;open orbit, 1 points with Schreier tree>
gap> Enumerate(o);
&lt;closed orbit, 29 points with Schreier tree>
gap> StrongOrbitsInForwardOrbit(o);
[ [ [ 5 ], [ 1 ], [ 4 ], [ 2 ], [ 3 ] ], 
  [ [ 1, 3 ], [ 2, 5 ], [ 4, 5 ], [ 3, 4 ], [ 1, 4 ], [ 2, 3 ], [ 1, 5 ], 
      [ 3, 5 ], [ 2, 4 ], [ 1, 2 ] ], 
  [ [ 1, 3, 4 ], [ 1, 2, 5 ], [ 2, 3, 4 ], [ 1, 2, 4 ], [ 1, 2, 3 ], 
      [ 2, 4, 5 ], [ 3, 4, 5 ], [ 1, 4, 5 ], [ 1, 3, 5 ], [ 2, 3, 5 ] ], 
  [ [ 2, 3, 4, 5 ] ], [ [ 1, 2, 3, 4 ], [ 1, 3, 4, 5 ] ], [ [ 1 .. 5 ] ] ]</Example>
  </Description>
  </ManSection>
<#/GAPDoc>
