#############################################################################
##
#W  grpsmat.xml
#Y  Copyright (C) 2015                                    Markus Pfeiffer
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="IsMatrixOverFiniteFieldGroup">
<ManSection>
  <Prop Name="IsMatrixOverFiniteFieldGroup" Arg="G"/>
  <Returns><K>true</K> or <K>false</K>.</Returns>
  <Description>
    A <E>matrix group</E> is simply a group of invertible matrices over a
    finite field. An object in &Semigroups; is a matrix group if
    it satisfies <Ref Prop="IsGroup" BookName="ref"/> and 
    <Ref Filt = "IsMatrixOverFiniteFieldCollection"/>.
    <Example><![CDATA[
gap> x := NewMatrixOverFiniteField(IsPlistMatrixOverFiniteFieldRep, GF(4), 3,
> Z(4) ^ 0 * [[1, 1, 0], [0, 1, 0], [1, 1, 1]]);
<matrix over GF(2^2) of degree 3>
gap> G := Group(x);
<group of 3x3 matrices over GF(2^2) with 1 generator>
gap> IsMatrixOverFiniteFieldGroup(G);
true
gap> G := Group(Z(4) ^ 0 * [[1, 1, 0], [0, 1, 0], [1, 1, 1]]);
Group([ <an immutable 3x3 matrix over GF2> ])
gap> IsGroup(G);
true
gap> IsMatrixOverFiniteFieldGroup(G);
false]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="MatrixGroupOperation">
<ManSection>

    <Example><![CDATA[
gap> x := NewMatrixOverFiniteField(IsPlistMatrixOverFiniteFieldRep, GF(4), 3,
> Z(4)^0*[[1,1,0], [0,1,0], [1,1,1]] );;
gap> y := NewMatrixOverFiniteField(IsPlistMatrixOverFiniteFieldRep, GF(4), 3,
> Z(4)^0*[[1,0,0], [1,0,1], [1,1,1]] );;
gap> G := Group(x);
<group of 3x3 matrices over GF(2^2) with 1 generator>
gap> G ^ y;
<group of 3x3 matrices over GF(2^2) with 1 generator>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsomorphismMatrixGroup">
<ManSection>
  <Attr Name="IsomorphismMatrixGroup" Arg="G"/>
  <Returns>An isomorphism.</Returns>
  <Description>
    Returns an isomorphism from <A>G</A> into a group generated by
    &GAP; library matrices.
    <Example><![CDATA[
gap> x := NewMatrixOverFiniteField(IsPlistMatrixOverFiniteFieldRep, GF(4), 3,
> Z(4)^0*[[1,1,0], [0,1,0], [1,1,1]] );;
gap> G := Group(x);;
gap> iso := IsomorphismMatrixGroup(G);;
gap> Source(iso); Range(iso);
<group of 3x3 matrices over GF(2^2) with 1 generator>
Group(
[ 
  [ [ Z(2)^0, Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0, 0*Z(2) ], 
      [ Z(2)^0, Z(2)^0, Z(2)^0 ] ] ])]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsMatrixGroup">
<ManSection>
  <Attr Name="AsMatrixGroup" Arg="G"/>
  <Returns>A &GAP; group.</Returns>
  <Description>
    Returns the image of an isomorphism returned by <Ref Label="IsomorphismMatrixGroup"/>.
    <Example><![CDATA[
gap> x := NewMatrixOverFiniteField(IsPlistMatrixOverFiniteFieldRep, GF(4), 3,
> Z(4)^0*[[1,1,0], [0,1,0], [1,1,1]] );;
gap> G := Group(x);;
gap> AsMatrixGroup(G);
Group(
[ 
  [ [ Z(2)^0, Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0, 0*Z(2) ], 
      [ Z(2)^0, Z(2)^0, Z(2)^0 ] ] ])]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>
