#############################################################################
##
#W  rmscong.xml
#Y  Copyright (C) 2014                                      Michael Torpey
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="RZMSCongruenceByLinkedTriple">
  <ManSection> 
    <Oper Name="RZMSCongruenceByLinkedTriple" Arg="s, n, colBlocks, rowBlocks"/>
    <Returns>A Rees 0-matrix semigroup congruence by linked triple</Returns>
    <Description>
      This function returns a semigroup congruence over the semigroup <A>s</A>
      corresponding to the linked triple (<A>n</A>, <A>colBlocks</A>,
      <A>rowBlocks</A>).  <A>n</A> should be a normal subgroup of g, the
      underlying semigroup of <A>s</A>; <A>colBlocks</A> should be a partition
      of the columns of the matrix of <A>s</A>; and <A>rowBlocks</A> should be a
      partition of the rows of the matrix of <A>s</A>.  For example, if the
      matrix has 5 rows, then a possibility for <A>rowBlocks</A> might be <C>[
      [1,3], [2,5], [4] ]</C>.<P/>

      If the arguments describe a valid linked triple on <A>s</A>, then an
      <C>IsRZMSCongruenceByLinkedTriple</C> object is returned, which can be
      used like any other semigroup congruence object.<P/>

      If the arguments describe a triple which is not <E>linked</E> in the sense
      described above, then this function returns an error.
      <Example>
gap> g := Group( [ (1,4,5), (1,5,3,4) ] );;
gap> mat := [ [  0,  0, (1,4,5),     0,     0, (1,4,3,5) ],
>             [  0, (),       0,     0, (3,5),         0 ],
>             [ (),  0,       0, (3,5),     0,         0 ] ];;
gap> s := ReesZeroMatrixSemigroup(g, mat);;
gap> n := Group([ (1,4)(3,5), (1,5)(3,4) ]);;
gap> colBlocks := [ [ 1 ], [ 2, 5 ], [ 3, 6 ], [ 4 ] ];;
gap> rowBlocks := [ [ 1 ], [ 2 ], [ 3 ] ];;
gap> cong := RZMSCongruenceByLinkedTriple(s, n, colBlocks, rowBlocks);
&lt;RZMS congruence by linked triple (2^2,4,3)&gt;</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RZMSCongruenceClassByLinkedTriple">
  <ManSection> 
    <Oper Name="RZMSCongruenceClassByLinkedTriple"
	  Arg="cong, nCoset, colClass, rowClass"/>
    <Returns>A Rees 0-matrix semigroup congruence class by linked
    triple</Returns>
    <Description>
      This function returns one congruence class of the congruence <A>cong</A>,
      as defined by the other three parameters.<P/>
      
      <A>cong</A> must be a Rees 0-matrix semigroup congruence by linked triple.
      If the linked triple consists of the three parameters <C>n</C>,
      <C>colBlocks</C> and <C>rowBlocks</C>, then <A>nCoset</A> must be a right
      coset of <C>n</C>, <A>colClass</A> must be a positive integer
      corresponding to a position in the list <C>colBlocks</C>, and
      <A>rowClass</A> must be a positive integer corresponding to a position in
      the list <C>rowBlocks</C>.<P/>

      If the arguments are valid, an <C>IsRZMSCongruenceClassByLinkedTriple</C>
      object is returned, which can be used like any other equivalence class
      object.  Otherwise, an error is returned.
      <Example>
gap> g := Group( [ (1,4,5), (1,5,3,4) ] );;
gap> mat := [ [  0,  0, (1,4,5),     0,     0, (1,4,3,5) ],
>             [  0, (),       0,     0, (3,5),         0 ],
>             [ (),  0,       0, (3,5),     0,         0 ] ];;
gap> s := ReesZeroMatrixSemigroup(g, mat);;
gap> n := Group([ (1,4)(3,5), (1,5)(3,4) ]);;
gap> colBlocks := [ [ 1 ], [ 2, 5 ], [ 3, 6 ], [ 4 ] ];;
gap> rowBlocks := [ [ 1 ], [ 2 ], [ 3 ] ];;
gap> cong := RZMSCongruenceByLinkedTriple(s, n, colBlocks, rowBlocks);;
gap> class := RZMSCongruenceClassByLinkedTriple(cong, RightCoset(n,(1,5)),2,3);
{(2,(3,4),3)}
      </Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="CongruencesOfSemigroup">
  <ManSection> 
    <Oper Name="CongruencesOfSemigroup" Arg="s"/>
    <Returns>A list</Returns>
    <Description>
      This function returns a list of all the congruences of the finite 0-simple
      Rees 0-matrix semigroup <A>s</A>.  This list will include all possible
      RZMS congruences by linked triple, as well as a special object describing
      the universal congruence, which has no linked triple representation.<P/>
      <Example>
gap> s := ReesZeroMatrixSemigroup(SymmetricGroup(3), [[(),(1,3,2)],[(1,2),0]]);;
gap> congs := CongruencesOfSemigroup(s);;</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsLinkedTriple">
  <ManSection> 
    <Oper Name="IsLinkedTriple" Arg="s, n, colBlocks, rowBlocks"/>
    <Returns><K>true</K> or <K>false</K></Returns>
    <Description>
      This function returns true if and only if the arguments (<A>n</A>,
      <A>colBlocks</A>, <A>rowBlocks</A>) form a linked triple on the finite
      0-simple semigroup <A>s</A>, in the sense described above.
      <Example>
gap> g := Group( [ (1,4,5), (1,5,3,4) ] );;
gap> mat := [ [  0,  0, (1,4,5),     0,     0, (1,4,3,5) ],
>             [  0, (),       0,     0, (3,5),         0 ],
>             [ (),  0,       0, (3,5),     0,         0 ] ];;
gap> s := ReesZeroMatrixSemigroup(g, mat);;
gap> n := Group([ (1,4)(3,5), (1,5)(3,4) ]);;
gap> colBlocks := [ [ 1 ], [ 2, 5 ], [ 3, 6 ], [ 4 ] ];;
gap> rowBlocks := [ [ 1 ], [ 2 ], [ 3 ] ];;
gap> IsLinkedTriple(s, n, colBlocks, rowBlocks);
true</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="NrCongruenceClasses">
  <ManSection> 
    <Oper Name="NrCongruenceClasses" Arg="cong"/>
    <Returns>a positive integer</Returns>
    <Description>
      This function returns the number of congruence classes the semigroup
      congruence <A>cong</A> has in its semigroup.  <A>cong</A> must be a Rees
      0-matrix semigroup congruence by linked triple, or a universal congruence.
      <Example>
gap> s := ReesZeroMatrixSemigroup(SymmetricGroup(3), [[(),(1,3,2)],[(1,2),0]]);;
gap> cong := CongruencesOfSemigroup(s)[3];;
gap> NrCongruenceClasses(cong);
9</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="CanonicalRepresentative">
  <ManSection> 
    <Oper Name="CanonicalRepresentative" Arg="class"/>
    <Returns>a Rees 0-matrix semigroup element</Returns>
    <Description>
      This function returns a canonical representative for the RZMS congruence
      class by linked triple <A>class</A>.  This representative can be used to
      identify a class uniquely.
      <Example>
gap> s := ReesZeroMatrixSemigroup(SymmetricGroup(3), [[(),(1,3,2)],[(1,2),0]]);;
gap> cong := CongruencesOfSemigroup(s)[3];;
gap> class := CongruenceClasses(cong)[3];;
gap> CanonicalRepresentative(class);
(1,(1,2,3),2)</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsSemigroupCongruenceByGeneratingPairs">
  <ManSection> 
    <Oper Name="AsSemigroupCongruenceByGeneratingPairs" Arg="cong"/>
    <Returns>a semigroup congruence</Returns>
    <Description>
      This function takes <A>cong</A>, a Rees 0-matrix semigroup congruence by
      linked triple, or a universal semigroup congruence, and returns the same
      congruence relation, but described by GAP's default method of implementing
      semigroup congruences: by a set of generating pairs for the congruence.
      <Example>
gap> s := ReesZeroMatrixSemigroup(SymmetricGroup(3), [[(),(1,3,2)],[(1,2),0]]);;
gap> cong := CongruencesOfSemigroup(s)[3];;
gap> AsSemigroupCongruenceByGeneratingPairs(cong);
&lt;semigroup congruence with 3 generating pairs&gt;</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="AsRZMSCongruenceByLinkedTriple">
  <ManSection> 
    <Oper Name="AsRZMSCongruenceByLinkedTriple" Arg="cong"/>
    <Returns>a Rees 0-matrix semigroup congruence by linked triple</Returns>
    <Description>
      This function takes a semigroup congruence <A>cong</A> over a finite
      0-simple Rees 0-matrix semigroup, and returns that congruence relation in
      a new form: either an RZMS congruence by linked triple, or a universal
      semigroup congruence.<P/>

      If the congruence is not defined over an appropriate semigroup, then this
      function returns an error.
      <Example>
gap> s := ReesZeroMatrixSemigroup(SymmetricGroup(3), [[(),(1,3,2)],[(1,2),0]]);;
gap> x := ReesZeroMatrixSemigroupElement(s, 1, (1,3,2), 1);;
gap> y := ReesZeroMatrixSemigroupElement(s, 1, (), 1);;
gap> cong := SemigroupCongruenceByGeneratingPairs(s, [ [x,y] ]);;
gap> AsRZMSCongruenceByLinkedTriple(cong);
&lt;RZMS congruence by linked triple (3,2,2)&gt;</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="UniversalSemigroupCongruence">
<ManSection> 
  <Oper Name="UniversalSemigroupCongruence" Arg="s"/>
  <Returns>a universal semigroup congruence</Returns>
  <Description>
    This function returns the universal semigroup congruence for the
    semigroup <A>s</A>.  It can be used in the same way as any other
    semigroup congruence object.
    <Example>
gap> s := ReesZeroMatrixSemigroup(SymmetricGroup(3), [[(),(1,3,2)],[(1,2),0]]);;
gap> UniversalSemigroupCongruence(s);
&lt;universal semigroup congruence&gt;</Example>
  </Description>
</ManSection>
<#/GAPDoc>
