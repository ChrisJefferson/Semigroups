#############################################################################
##
#W  utils.xml
#Y  Copyright (C) 2011                             James D. Mitchell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="CitrusMakeDoc">
  <ManSection>
    <Func Name="CitrusMakeDoc" Arg=""/>
    <Returns>Nothing.</Returns>    
    <Description>
      this function should be called with no argument to compile the 
      &Citrus; documentation. The same effect can be
      achieved by entering:

      <Log>
MakeGAPDocDoc(Concatenation(PackageInfo("citrus")[1]!.
 InstallationPath, "/doc"), "citrus.xml", [
 "utils.xml", "greens.xml", "orbits.xml", "properties.xml",
 "transform.xml", "../PackageInfo.g"], "citrus", "MathJax");;</Log>

      at the &GAP; prompt. 
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="CitrusTestAll">
  <ManSection>
    <Func Name="CitrusTestAll" Arg=""/>
    <Returns>Nothing.</Returns> 
    <Description>
      this function should be called with no argument to comprehensively
      test that &Citrus; is working correctly. These tests
      should take no more than 1 minute to complete. The same effect can be
      achieved by entering:

      <Log>Read(Filename(DirectoriesPackageLibrary("citrus","tst"),"testall.g"));;</Log>

      at the &GAP; prompt. 
      To quickly test that &Citrus; is installed correctly
      use <Ref Func="CitrusTestInstall"/>. 
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="CitrusTestManualExamples">
  <ManSection>
    <Func Name="CitrusTestManualExamples" Arg=""/>
    <Returns>Nothing.</Returns> 
    <Description>
      this function should be called with no argument to test the examples in
      the &Citrus; manual. These tests
      should take no more than a few seconds to complete. The same 
      effect can be achieved by entering:

      <Log>SizeScreen([80]); SetInfoLevel(InfoWarning, 0);
TestManualExamples(Concatenation(PackageInfo("citrus")[1]!.
InstallationPath, "/doc"), "citrus.xml", 
["utils.xml", "greens.xml",
"orbits.xml", "properties.xml", "transform.xml"]);</Log>

      at the &GAP; prompt. 
      To more comprehensively test that &Citrus; is installed
      correctly use <Ref Func="CitrusTestAll"/>. See also <Ref
      Func="CitrusTestInstall"/>.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="CitrusTestInstall">
  <ManSection>
    <Func Name="CitrusTestInstall" Arg=""/>
    <Returns>Nothing.</Returns> 
    <Description>
      this function should be called with no argument to test your installation
      of &Citrus; is working correctly. These tests
      should take no more than a fraction of a second to complete. The same 
      effect can be achieved by entering:

<Log>ReadTest(Filename(DirectoriesPackageLibrary("citrus","tst"),"testinstall.tst"));;</Log>

      at the &GAP; prompt. 
      To more comprehensively test that &Citrus; is installed
      correctly use <Ref Func="CitrusTestAll"/>. 
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="Degree">
  <ManSection>
    <Func Name="Degree" Arg="obj"/>
    <Returns>A positive integer.</Returns>
    <Description>
      returns the result of 
      <Ref Oper="DegreeOfTransformation" BookName="ref"/>, 
      if <A>obj</A> is a transformation semigroup
      and 
      <Ref Oper="DegreeOfTransformationSemigroup" BookName="ref"/> 
      if <A>obj</A> a transformation.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="Rank">
  <ManSection>
    <Func Name="Rank" Arg="f"/>
    <Returns>A positive integer.</Returns>
    <Description>
      returns the result of 
      <Ref Oper="RankOfTransformation" BookName="ref"/>, 
      if <A>f</A> is a transformation.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="Generators">
  <ManSection>
    <Func Name="Generators" Arg="S"/>
    <Returns>A list of a transformations.</Returns>
    <Description>
      returns the result of 
      <Ref Attr="GeneratorsOfMonoid" BookName="ref"/>, 
      if <A>S</A> is a transformation monoid and returns the result of 
      <Ref Attr="GeneratorsOfSemigroup" BookName="ref"/> 
      if <A>S</A> is a transformation semigroup but not a transformation 
      monoid.
<Example>gap> M:=Monoid(Transformation( [ 1, 4, 6, 2, 5, 3, 7, 8, 9, 9 ] ),
> Transformation( [ 6, 3, 2, 7, 5, 1, 8, 8, 9, 9 ] ) );;
gap> GeneratorsOfSemigroup(M);
[ Transformation( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] ), 
  Transformation( [ 1, 4, 6, 2, 5, 3, 7, 8, 9, 9 ] ), 
  Transformation( [ 6, 3, 2, 7, 5, 1, 8, 8, 9, 9 ] ) ]
gap> GeneratorsOfMonoid(M);
[ Transformation( [ 1, 4, 6, 2, 5, 3, 7, 8, 9, 9 ] ), 
  Transformation( [ 6, 3, 2, 7, 5, 1, 8, 8, 9, 9 ] ) ]
gap> Generators(M);
[ Transformation( [ 1, 4, 6, 2, 5, 3, 7, 8, 9, 9 ] ), 
  Transformation( [ 6, 3, 2, 7, 5, 1, 8, 8, 9, 9 ] ) ]
gap> S:=Semigroup(Generators(M));;
gap> Generators(S);
[ Transformation( [ 1, 4, 6, 2, 5, 3, 7, 8, 9, 9 ] ), 
  Transformation( [ 6, 3, 2, 7, 5, 1, 8, 8, 9, 9 ] ) ]
gap> GeneratorsOfSemigroup(S);
[ Transformation( [ 1, 4, 6, 2, 5, 3, 7, 8, 9, 9 ] ), 
  Transformation( [ 6, 3, 2, 7, 5, 1, 8, 8, 9, 9 ] ) ]</Example>
   </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="InfoCitrus">
  <ManSection>
    <InfoClass Name="InfoCitrus"/>
    <Description>
    is the info class (see <Ref Subsect="Info Functions" BookName="ref"/>) of 
    &Citrus;. The info level is initially set to 0 and no info messages are
    displayed.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RandomTransformationMonoid">
  <ManSection>
    <Func Name="RandomTransformationMonoid" Arg="m, n"/>
    <Func Name="RandomTransformationSemigroup" Arg="m, n"/>
    <Returns>A transformation semigroup.</Returns>
    <Description>
      returns a random transformation monoid or semigroup of degree <A>n</A> 
      with <A>m</A> generators.
      <Example>
gap&gt; S:=RandomTransformationMonoid(5,5);
&lt;monoid with 5 generators&gt;
gap&gt; S:=RandomTransformationSemigroup(5,5);
&lt;semigroup with 5 generators&gt;</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="ReadCitrus">
  <ManSection> 
    <Func Name="ReadCitrus" Arg="filename[, nr]"/>
    <Returns>A list of transformations or a list of lists of transformations.
    </Returns>
    <Description>
      if <A>filename</A> is a file created using <Ref Func="WriteCitrus"/>,
      then <C>ReadCitrus</C> returns the contents of this file as a list of
      lists of transformations. If the optional second argument <A>nr</A> is
      present then <C>ReadCitrus</C> returns the transformations stored in the 
      <A>nr</A>th line of <A>filename</A>. <P/>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="WriteCitrus">
  <ManSection> 
    <Func Name="WriteCitrus" Arg="trans, filename"/>
    <Returns>Nothing.</Returns>
    <Description>
      This function provides a method for writing transformations to a file
      that uses a relatively small amount of disk space. The resulting file
      can be further compressed using <C>gzip</C>.<P/>
      
      <A>trans</A> should be a list of transformations of equal degree, a 
      transformation semigroup, or a list of lists of transformations or 
      transformation semigroups and <A>filename</A> should be a string 
      containing the name of a file where the transformations in <A>trans</A> 
      will be stored. <P/>

      <C>WriteCitrus</C> appends a line to the file <A>filename</A>
      for every list of transformations in <A>trans</A>. If any element of
      <A>trans</A> is a transformation semigroup, then the generators of that
      semigroup are written to <A>filename</A>. The first character <C>m</C> of 
      the line is the number of characters in the degree of
      the transformations to be written, the next <C>m</C> characters are the 
      degree <C>n</C> of the transformations to be written, and the
      transformations themselves are written in blocks of <C>m*n</C> in the 
      remainder of the line. For example, if the transformations:
      <Log>
[ Transformation( [ 2, 6, 7, 2, 6, 9, 9, 1, 1, 5 ] ), 
  Transformation( [ 3, 8, 1, 9, 9, 4, 10, 5, 10, 6 ] )]</Log>
      are written as:
      <Log>
210 2 2 6 7 2 6 9 9 1 1 5 3 8 1 9 9 410 510 6</Log>
     
      The file <A>filename</A> can be read using <Ref Func="ReadCitrus"/>.
      <P/>
<Example>
gap> ReadCitrus("pkg/citrus/examples/graph7c.citrus.gz", 453);
[ Transformation( [ 1, 2, 2, 4, 5, 6, 7 ] ), 
  Transformation( [ 1, 2, 3, 4, 5, 6, 7 ] ), 
  Transformation( [ 1, 2, 3, 4, 5, 7, 7 ] ), 
  Transformation( [ 1, 3, 2, 4, 7, 6, 7 ] ), 
  Transformation( [ 4, 2, 1, 1, 6, 5, 7 ] ), 
  Transformation( [ 4, 3, 2, 1, 6, 7, 7 ] ), 
  Transformation( [ 4, 4, 5, 7, 6, 1, 1 ] ), 
  Transformation( [ 7, 6, 6, 1, 2, 4, 4 ] ), 
  Transformation( [ 7, 7, 5, 4, 3, 1, 1 ] ) ]</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

#EOF
